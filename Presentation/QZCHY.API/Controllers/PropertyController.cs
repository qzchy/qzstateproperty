using QZCHY.API.Models.Properties;
using QZCHY.Core;
using QZCHY.Core.Domain.Media;
using QZCHY.Core.Domain.Properties;
using QZCHY.Services.AccountUsers;
using QZCHY.Services.Logging;
using QZCHY.Services.Media;
using QZCHY.Services.Property;
using QZCHY.Web.Api.Extensions;
using QZCHY.Web.Framework.Controllers;
using QZCHY.Web.Framework.Response;
using System;
using System.Collections.Generic;
using System.Data.Entity.Spatial;
using System.Linq;
using System.Web;
using System.Web.Http;


namespace QZCHY.API.Controllers
{
    [RoutePrefix("Properties")]
    public class PropertyController : BaseAdminApiController
    {
        private readonly IPropertyService _propertyService;
        private readonly IGovernmentService _governmentService;
        private readonly IAccountUserService _accountUserService;
        private readonly IAccountUserActivityService _accountUserActivityService;
        private readonly IWebHelper _webHelper;
        private readonly IWorkContext _workContext;
        private readonly IPropertyNewCreateService _propertyNewCreateService;
        private readonly IPropertyLendService _propertyLendService;
        private readonly IPropertyRentService _propertyRentService;
        private readonly IPropertyAllotService _propertyAllotService;
        private readonly IPropertyOffService _propertyOffService;
        private readonly IPropertyEditService _propertyEditService;
        private readonly ICopyPropertyService _copyPropertyService;
        private readonly IPictureService _pictureService;
        private readonly IFileService _fileService;

        private const string xqregion = "MULTIPOLYGON (((118.83061773800011 28.984037100000023, 118.83027875800008 28.97749847800003, 118.83019018700008 28.974613994000038, 118.8305129040001 28.972312430000045, 118.83115703500005 28.970457877000058, 118.83322749800004 28.966178772000035, 118.83465902600005 28.963238638000064, 118.83466298400003 28.963230511000063, 118.83583213100007 28.960829266000076, 118.83686879600009 28.958705528000053, 118.83732194300001 28.957777200000066, 118.83775487000003 28.956890297000029, 118.83803179300003 28.956322986000032, 118.83855440900004 28.955252340000072, 118.83884254200007 28.954662066000026, 118.84020364700007 28.951528287000031, 118.84060934700005 28.948819378000053, 118.84028735600009 28.945962245000032, 118.84021588600001 28.945591322000041, 118.84017773300002 28.945393320000051, 118.84001737400001 28.944561079000039, 118.8465220380001 28.944563016000075, 118.85055186600005 28.945061308000049, 118.85285442800011 28.946059412000068, 118.85467031100006 28.94780232200003, 118.85597205100009 28.950818167000079, 118.85607345800008 28.95135833300003, 118.85650909700007 28.95367883800003, 118.85669442000005 28.954665995000028, 118.85691678400008 28.955533511000056, 118.85699048400011 28.955821042000025, 118.85767353400001 28.958485857000028, 118.85814994500004 28.960344497000051, 118.85944800100003 28.964676319000034, 118.86021977400003 28.967979994000075, 118.86040178500002 28.969061312000065, 118.8606690360001 28.970019251000053, 118.86165747200005 28.971703474000037, 118.86217721200001 28.972589070000026, 118.8622569690001 28.972724968000023, 118.86229325900001 28.972786799000062, 118.86231377600006 28.97282175600003, 118.86233427800005 28.972856686000057, 118.86237058800009 28.972918555000035, 118.86546466900006 28.978391817000045, 118.86686591500006 28.980363157000056, 118.86924732900002 28.982537708000052, 118.87079458700009 28.983395469000072, 118.87090955700012 28.98343731500006, 118.8713690510001 28.983604557000035, 118.87058289800007 28.985239283000055, 118.86954085900004 28.987714383000025, 118.86940295200009 28.988812706000033, 118.87045117500008 28.992033157000037, 118.86934025900007 28.993799737000074, 118.86782612500008 28.995633482000073, 118.86706796600004 28.996669661000055, 118.8659381440001 28.996595283000033, 118.86269051200009 28.995498156000053, 118.86091137900007 28.994901580000032, 118.85981421800011 28.994533682000053, 118.85758987400004 28.993787819000033, 118.85758166700009 28.993785067000033, 118.85496771900011 28.992908563000071, 118.85288624200007 28.992210606000071, 118.84674147700002 28.99020600700004, 118.8438976000001 28.989421495000045, 118.83255582700008 28.987639510000065, 118.83230285500008 28.987556985000026, 118.83206241800008 28.987465254000028, 118.83130982700004 28.987073390000035, 118.83070544000009 28.986148014000037, 118.83061773800011 28.984037100000023)))";
        private const string jjqregion = "MULTIPOLYGON (((118.88477295200005 28.93451525100005, 118.88488604700001 28.934363443000052, 118.8849706530001 28.934249876000024, 118.89526449900006 28.920432414000061, 118.89964226400002 28.914173855000058, 118.89614908800002 28.914121941000076, 118.88459716000011 28.914763252000057, 118.87811260400008 28.915212586000052, 118.8689155080001 28.916345943000067, 118.86405046700008 28.916570947000025, 118.8603196470001 28.916596446000028, 118.85774818100003 28.916386991000024, 118.85646065900005 28.91583406500007, 118.8545084000001 28.91461408300006, 118.85247788900006 28.914179473000047, 118.84975451100001 28.914751369000044, 118.84643043700009 28.915550784000061, 118.83793597800002 28.918321083000023, 118.82918880700004 28.910440974000039, 118.82251836100011 28.902381993000063, 118.8166223720001 28.893678435000027, 118.83119228300006 28.885017819000041, 118.83264901900009 28.884642891000055, 118.83169354000006 28.883675702000062, 118.82972154000004 28.881192706000036, 118.82851156000004 28.879454544000055, 118.82613783000011 28.876350436000052, 118.82579559100009 28.875616738000076, 118.82261744200002 28.869601259000035, 118.82093782300001 28.866681554000024, 118.82006041000011 28.865578739000057, 118.81890619800004 28.864602149000063, 118.81644270800007 28.862711005000051, 118.81344750500011 28.86051481100003, 118.81488916400008 28.858007938000071, 118.81753764600001 28.853430360000061, 118.81936802100006 28.853287823000073, 118.82588779300011 28.853898445000027, 118.82574680100004 28.852549620000048, 118.8262279700001 28.852530349000062, 118.82701354900007 28.852590892000023, 118.82783572100004 28.852737406000074, 118.8284101480001 28.852839771000049, 118.82924157800005 28.852954405000048, 118.82998547800003 28.853042405000053, 118.83129895400009 28.853173449000053, 118.83236514400005 28.85317201600003, 118.83336401600002 28.853070862000038, 118.83409423000001 28.852991247000034, 118.83623250100004 28.852474516000029, 118.8385663470001 28.851825732000066, 118.83981456100003 28.85151223500003, 118.84206464300007 28.851288105000037, 118.84423855400007 28.851536003000035, 118.84654713300006 28.852271801000029, 118.84770273600009 28.852711391000071, 118.84992947000001 28.853606270000057, 118.85179551100009 28.854094255000064, 118.8536178170001 28.854108084000075, 118.85495069500007 28.854093052000053, 118.85829961100001 28.854053686000043, 118.85995537100007 28.854174478000061, 118.86101820600004 28.854509042000075, 118.86209465700006 28.85479852800006, 118.86350626600006 28.855343173000051, 118.86559327800001 28.85615642700003, 118.86697357900005 28.856686473000025, 118.86787435800011 28.857033839000053, 118.87233152900001 28.85840365200005, 118.87851828800001 28.859980889000042, 118.88579466500005 28.862091520000035, 118.88686066500009 28.862383313000066, 118.89060119600003 28.862611775000062, 118.89615602900005 28.862088038000024, 118.89898955300009 28.86170493700007, 118.90307622300008 28.860526374000074, 118.91125245700005 28.861311887000056, 118.92458414500004 28.862031715000057, 118.92574688600007 28.862041001000023, 118.93252711700006 28.862700177000079, 118.96360482500006 28.863183434000064, 118.97772070100007 28.864032264000059, 118.98602354000002 28.868179110000028, 118.99546799100006 28.873899941000047, 119.01293909100002 28.887597021000033, 119.02377511000009 28.89664450500004, 119.03076269900009 28.901107380000042, 119.03523771400012 28.90038620100006, 119.03603844700001 28.906670157000065, 119.03695906600001 28.915858118000074, 119.04022516600003 28.916755263000027, 119.04241171900003 28.917883046000043, 119.04613872200002 28.919855751000057, 119.04633555300006 28.920084664000058, 119.04771305100007 28.922191015000067, 119.04875691400002 28.922533181000063, 119.04856106700004 28.926977122000039, 119.04846185000008 28.929201267000053, 119.04850653700009 28.929700707000052, 119.04849886400007 28.930850627000041, 119.04846479200012 28.931445723000024, 119.04849565000006 28.932272233000049, 119.04851844600012 28.934410992000039, 119.04848005200006 28.934625046000065, 119.04824503600003 28.935153204000073, 119.04749338800002 28.936571750000041, 119.04674180900008 28.938042986000028, 119.04645245100005 28.938515296000048, 119.04527825900004 28.939623501000028, 119.04463265000004 28.940294299000072, 119.04454128400005 28.940586544000041, 119.04440196900009 28.94125563800003, 119.04391527600001 28.944016752000039, 119.04359113600003 28.947302991000072, 119.04343898500008 28.948008730000026, 119.04305500000009 28.94863618200003, 119.04201556500004 28.951196972000048, 119.03917935600009 28.957734113000072, 119.03405629500003 28.96967593100004, 119.03125893600009 28.976356517000056, 119.03019340700007 28.97877139600007, 119.02849820800009 28.979836869000053, 119.02739295900005 28.981701410000028, 119.02075232200002 28.984892539000043, 119.01914187200009 28.985560471000042, 119.01083607800001 28.987109169000064, 119.00155137900003 28.987691514000062, 118.99565164800003 28.992244729000049, 118.99263996800005 28.994073700000058, 118.99088931900008 28.994648210000037, 118.98714257600011 28.994902188000026, 118.98673299400002 28.992861515000072, 118.98098833400002 28.990968593000048, 118.97841923200008 28.987819628000068, 118.97687579000001 28.987052076000055, 118.97405571800005 28.985987238000064, 118.9767390400001 28.977687425000056, 118.95054975000005 28.971152914000072, 118.94313604200011 28.96721831900004, 118.93681254100011 28.962544109000078, 118.92142564700009 28.951580428000057, 118.9186565760001 28.950149152000051, 118.91662096800007 28.950042453000037, 118.90204695600005 28.95190875000003, 118.8963119340001 28.952802070000075, 118.88295347200005 28.954991454000037, 118.87718327100004 28.954345549000038, 118.87706656100011 28.954332484000076, 118.87633296400008 28.954250367000043, 118.87563339900009 28.95417205900003, 118.87549967000007 28.952233633000048, 118.87538319900011 28.950545378000072, 118.87532426200005 28.949550578000071, 118.87563525000007 28.948580363000076, 118.87598606000006 28.947485908000033, 118.87603547500009 28.947331746000032, 118.87651328000004 28.946162358000038, 118.87732865200007 28.944621430000041, 118.8776402530001 28.944032555000035, 118.87795462500003 28.943443307000052, 118.87842787400007 28.942556266000054, 118.87857413500001 28.942278411000075, 118.87870754700009 28.94202496500003, 118.87900794600012 28.94145429200006, 118.8791545790001 28.941225423000049, 118.87962474100004 28.940491579000025, 118.87976987700006 28.940342830000077, 118.88206792800008 28.937987584000041, 118.8823129110001 28.937685972000054, 118.88337610800011 28.936377008000079, 118.88477295200005 28.93451525100005)))";
        private const string lcqregion = "MULTIPOLYGON (((118.85129157100005 28.942509139000038, 118.85061844300003 28.940104038000072, 118.85032623200004 28.938541301000043, 118.85003437100011 28.93763840400004, 118.85003435700003 28.937638366000044, 118.85002932100008 28.937622786000077, 118.85002506500007 28.937609619000057, 118.85002411300002 28.937606674000051, 118.84985688100005 28.93708932100003, 118.84943080700009 28.935782152000058, 118.84856268900012 28.933732144000032, 118.84764124700007 28.932189544000039, 118.84709641000006 28.931313481000075, 118.84694233000005 28.931065728000078, 118.84619278300011 28.929860503000043, 118.84747168400008 28.929757272000074, 118.84837864300005 28.929685368000037, 118.84839658600004 28.929683946000068, 118.85089168800005 28.929486138000073, 118.85268269700009 28.929349140000056, 118.85276256100008 28.92934303100003, 118.85341727200012 28.929292951000036, 118.85543278300008 28.929245249000076, 118.85718178400009 28.929379603000029, 118.85981124000011 28.929729830000042, 118.85981127600007 28.929729835000046, 118.85992245500006 28.929744506000077, 118.85992951500009 28.929745437000065, 118.86245220300009 28.93007837600004, 118.86245741200003 28.93007906400004, 118.86639648300002 28.930600785000024, 118.86800453000001 28.930812682000067, 118.87010887800011 28.931089978000045, 118.87121559500008 28.931239093000045, 118.87351133400011 28.931548411000051, 118.87608641100007 28.931895367000038, 118.87775883000006 28.932110669000053, 118.87897113100007 28.932266737000077, 118.88185836300011 28.932833692000031, 118.88327375100005 28.933496490000039, 118.88477246000002 28.934514916000069, 118.88337610800011 28.936377008000079, 118.88206792800008 28.937987584000041, 118.87962474100004 28.940491579000025, 118.87900794600012 28.94145429200006, 118.87870754700009 28.94202496500003, 118.87857413500001 28.942278411000075, 118.87842787400007 28.942556266000054, 118.87795462500003 28.943443307000052, 118.8776402530001 28.944032555000035, 118.87747416100001 28.944345931000043, 118.87651946400001 28.946147223000025, 118.87603547500009 28.947331746000032, 118.87598606000006 28.947485908000033, 118.87532426200005 28.949550578000071, 118.87538319900011 28.950545378000072, 118.87563339900009 28.95417205900003, 118.87633296400008 28.954250367000043, 118.87706656100011 28.954332484000076, 118.87769184700005 28.954402477000031, 118.87784626400003 28.954419763000033, 118.87791138600005 28.954538549000063, 118.87826436400007 28.955182402000048, 118.87846270000011 28.956874709000033, 118.87859634800009 28.957607732000042, 118.87868482900001 28.958093033000068, 118.87909958700004 28.96027428900004, 118.87928841600001 28.960832141000026, 118.88097957600007 28.963953768000067, 118.88211330500008 28.96603525200004, 118.88269453800001 28.967102371000067, 118.88279407800007 28.967285124000057, 118.88315357500005 28.967945146000034, 118.88343334100011 28.968446166000035, 118.8849403480001 28.971145003000061, 118.88561635400004 28.972405041000059, 118.88608077200001 28.973270692000028, 118.88633247200005 28.974912391000032, 118.88639591300011 28.975666467000053, 118.88572615500004 28.975774041000079, 118.88543084300011 28.975836848000029, 118.88492745200006 28.975943909000023, 118.8842531680001 28.976111318000051, 118.88365198200006 28.976349447000075, 118.88304664900011 28.976611489000049, 118.88235741300002 28.977085017000036, 118.88001649400007 28.978828586000077, 118.88001594500008 28.978829182000027, 118.88001470800009 28.978830769000069, 118.88000986700001 28.978836987000079, 118.87980701900005 28.979097370000034, 118.87960308000004 28.979397173000052, 118.87925077300008 28.97997173400006, 118.87914064000006 28.980151344000035, 118.87867746800009 28.980975278000074, 118.87867744700009 28.980975346000037, 118.87852133400008 28.981475746000058, 118.87808732700012 28.983214732000079, 118.87787359400011 28.983743490000052, 118.87768552000011 28.983892320000052, 118.8755325950001 28.984252826000045, 118.87504033000005 28.984306196000034, 118.87450498400005 28.984320922000052, 118.87399022200009 28.984317507000071, 118.87348216900011 28.984253677000027, 118.87308424200012 28.984170180000035, 118.87297482000008 28.984140840000066, 118.87268272600011 28.984062519000076, 118.87260615200012 28.984035998000024, 118.87197001900006 28.983815676000063, 118.8713690510001 28.983604557000035, 118.87090955700012 28.98343731500006, 118.87079458700009 28.983395469000072, 118.86924732900002 28.982537708000052, 118.86686591500006 28.980363157000056, 118.8655810250001 28.97855551300006, 118.86546466900006 28.978391817000045, 118.86237058800009 28.972918555000035, 118.86233427700006 28.972856686000057, 118.86231377600006 28.97282175600003, 118.86229325900001 28.972786799000062, 118.8622569690001 28.972724968000023, 118.86217721200001 28.972589070000026, 118.86165747000007 28.971703475000027, 118.8612712370001 28.971045367000045, 118.8606690360001 28.970019251000053, 118.8605744460001 28.969680203000053, 118.86040178500002 28.969061312000065, 118.86028382300003 28.968360508000046, 118.86021977400003 28.967979994000075, 118.85944800100003 28.964676319000034, 118.85880764100011 28.962539335000031, 118.85814994500004 28.960344497000051, 118.85767353400001 28.958485857000028, 118.85699048400011 28.955821042000025, 118.85691678400008 28.955533511000056, 118.85681642500003 28.955141979000075, 118.85669442000005 28.954665995000028, 118.85664342500002 28.954416690000073, 118.8565602760001 28.954010175000064, 118.85650909700007 28.95367883800003, 118.85607345800008 28.95135833300003, 118.85597205100009 28.950818167000079, 118.85467031100006 28.94780232200003, 118.85285442800011 28.946059412000068, 118.85231790400007 28.945826842000031, 118.85247536500003 28.945743609000033, 118.85248796600001 28.945632649000061, 118.85226424000007 28.945022114000039, 118.85203171700005 28.944387572000039, 118.85129157100005 28.942509139000038)))";
        private const string kcegion
        private const string qjregion


        public PropertyController(
            IPropertyService propertyService,
            IAccountUserService accountUserService,
        IGovernmentService governmentService,
            IAccountUserActivityService accountUserActivityService,
             IWebHelper webHelper,
             IPropertyNewCreateService propertyNewCreateService,
             IPropertyLendService propertyLendService,
             IPropertyRentService propertyRentService,
             IPropertyAllotService propertyAllotService, IPropertyOffService propertyOffService,
              IPropertyEditService propertyEditService, ICopyPropertyService copyPropertyService,
              IPictureService pictureService, IFileService fileService,
        IWorkContext workContext)
        {
            _propertyService = propertyService;
            _accountUserService = accountUserService;
            _accountUserActivityService = accountUserActivityService;
            _governmentService = governmentService;
            _propertyNewCreateService = propertyNewCreateService;
            _propertyLendService = propertyLendService;
            _propertyRentService = propertyRentService;
            _propertyAllotService = propertyAllotService;
            _propertyOffService = propertyOffService;
            _webHelper = webHelper;
            _workContext = workContext;
            _propertyEditService = propertyEditService;
            _copyPropertyService = copyPropertyService;
            _pictureService = pictureService;
            _fileService = fileService;
        }

        #region utility     

        /// <summary>
        /// 模型检查
        /// </summary>
        /// <param name="propertyCreateModel"></param>
        /// <returns></returns>
        [NonAction]

        protected virtual string PropertyCreateModelValid(PropertyCreateModel propertyCreateModel)
        {

            if (propertyCreateModel.PropertyTypeId == 0)
            {
                if (propertyCreateModel.ConstructArea <
                    (propertyCreateModel.CurrentUse_Idle + propertyCreateModel.CurrentUse_Lend +
                    propertyCreateModel.CurrentUse_Rent + propertyCreateModel.CurrentUse_Self))
                {
                    return "建筑面积应大于自用、出租、出借、闲置面积之和";
                }
            }

            if (propertyCreateModel.PropertyTypeId == 1)
            {
                if (propertyCreateModel.LandArea <
                (propertyCreateModel.CurrentUse_Idle + propertyCreateModel.CurrentUse_Lend +
                propertyCreateModel.CurrentUse_Rent + propertyCreateModel.CurrentUse_Self))
                {
                    return "土地面积应大于自用、出租、出借、闲置面积之和";
                }
            }

            if (string.IsNullOrEmpty(propertyCreateModel.Logo) && string.IsNullOrEmpty(propertyCreateModel.LogoUrl))
                return "请上传资产封面照片";


            return "";
        }

        /// <summary>
        /// 资产模型通用性处理
        /// </summary>
        /// <param name="property"></param>
        /// <param name="propertyModel"></param>
        [NonAction]

        protected virtual void PrepareProperty(Property property, PropertyCreateModel propertyCreateModel)
        {
            #region 日期处理
            if (!string.IsNullOrEmpty(propertyCreateModel.GetedDate))
            {
                try
                {
                    property.GetedDate = Convert.ToDateTime(propertyCreateModel.GetedDate);
                }
                catch
                {
                }
            }
            #endregion

            //产权单位处理
            if (propertyCreateModel.GovernmentId == 0) property.Government = _workContext.CurrentAccountUser.Government;
            else
            {
                var g = _governmentService.GetGovernmentUnitById(propertyCreateModel.GovernmentId);
                if (g == null) throw new Exception("产权单位无效");
                property.Government = g;
            }

            if (!string.IsNullOrEmpty(propertyCreateModel.Location)) property.Location = DbGeography.FromText(propertyCreateModel.Location);
            else throw new Exception("空间位置不能为空");
            if (!string.IsNullOrEmpty(propertyCreateModel.Extent)) property.Extent = DbGeography.FromText(propertyCreateModel.Extent);

            var DBLocaltion = DbGeography.FromText(propertyCreateModel.Location);
            var xq = DbGeography.FromText(xqregion);
            var kc = DbGeography.FromText(kcegion);
            var qj = DbGeography.FromText(qjregion);
            var lcq = DbGeography.FromText(lcqregion);
            var jjq = DbGeography.FromText(jjqregion);

            if (xq.Intersects(DBLocaltion))
            {
                property.Region = Region.West;
            }
            else if (kc.Intersects(DBLocaltion))
            {
                property.Region = Region.KC;
            }

            else if (qj.Intersects(DBLocaltion))
            {
                property.Region = Region.QJ;
            }
            else if (jjq.Intersects(DBLocaltion))
            {
                property.Region = Region.Clusters;
            }
            else if (lcq.Intersects(DBLocaltion))
            {
                property.Region = Region.OldCity;
            }

            property.HasConstructID = !string.IsNullOrEmpty(property.EstateId) || !string.IsNullOrEmpty(property.ConstructId);  //是否拥有房产证
            property.HasLandID = !string.IsNullOrEmpty(property.EstateId) || !string.IsNullOrEmpty(property.LandId);  //是否土地证
        }

        /// <summary>
        /// 高级搜索参数赋值
        /// </summary>
        /// <param name="model"></param>
        /// <param name="request"></param>
        [NonAction]
        protected virtual PropertyAdvanceConditionRequest PrepareAdvanceCondition(PropertyAdvanceConditionModel propertyAdvanceConditionModel)
        {
            var advanceCondition = new PropertyAdvanceConditionRequest();

            advanceCondition.SerachParentGovernement = propertyAdvanceConditionModel.Government.Manage;
            if (propertyAdvanceConditionModel.Government.SelectedId > 0)
                advanceCondition.GovernmentId = propertyAdvanceConditionModel.Government.SelectedId;

            if (propertyAdvanceConditionModel.Government.IsCompany) advanceCondition.GovernmentTypes.Add((int)GovernmentType.Company);
            if (propertyAdvanceConditionModel.Government.IsGovernment) advanceCondition.GovernmentTypes.Add((int)GovernmentType.Government);
            if (propertyAdvanceConditionModel.Government.IsInstitution) advanceCondition.GovernmentTypes.Add((int)GovernmentType.Institution);
            if (advanceCondition.Region.Count == 3) advanceCondition.GovernmentTypes = new List<int>();

            advanceCondition.PropertyType = new List<int>();
            if (propertyAdvanceConditionModel.PropertyType.Construct) advanceCondition.PropertyType.Add((int)PropertyType.House);
            if (propertyAdvanceConditionModel.PropertyType.Land) advanceCondition.PropertyType.Add((int)PropertyType.Land);
            if (propertyAdvanceConditionModel.PropertyType.ConstructOnLand) advanceCondition.PropertyType.Add((int)PropertyType.LandUnderHouse);
            if (advanceCondition.PropertyType.Count == 3) advanceCondition.PropertyType = new List<int>();

            advanceCondition.Region = new List<int>();
            if (propertyAdvanceConditionModel.Region.Old) advanceCondition.Region.Add((int)Region.OldCity);
            if (propertyAdvanceConditionModel.Region.West) advanceCondition.Region.Add((int)Region.West);
            if (propertyAdvanceConditionModel.Region.Jjq) advanceCondition.Region.Add((int)Region.Clusters);
            if (propertyAdvanceConditionModel.Region.Kc) advanceCondition.Region.Add((int)Region.KC);
            if (propertyAdvanceConditionModel.Region.Qj) advanceCondition.Region.Add((int)Region.QJ);
            if (propertyAdvanceConditionModel.Region.Other) advanceCondition.Region.Add((int)Region.Others);
            if (advanceCondition.Region.Count == 6) advanceCondition.Region = new List<int>();

            advanceCondition.Certificate_Both = propertyAdvanceConditionModel.Certificate.Both;
            advanceCondition.Certificate_Construct = propertyAdvanceConditionModel.Certificate.Construct;
            advanceCondition.Certificate_Land = propertyAdvanceConditionModel.Certificate.Land;
            advanceCondition.Certificate_None = propertyAdvanceConditionModel.Certificate.None;

            advanceCondition.Current_Self = propertyAdvanceConditionModel.Current.Self;
            advanceCondition.Current_Idle = propertyAdvanceConditionModel.Current.Idle;
            advanceCondition.Current_Lend = propertyAdvanceConditionModel.Current.Lend;
            advanceCondition.Current_Rent = propertyAdvanceConditionModel.Current.Rent;

            advanceCondition.NextStep = new List<int>();
            switch (propertyAdvanceConditionModel.NextStep.MapType)
            {
                case 1:
                    if (propertyAdvanceConditionModel.NextStep.Ct) advanceCondition.NextStep.Add((int)NextStepType.InjectionCT);
                    if (propertyAdvanceConditionModel.NextStep.Jt) advanceCondition.NextStep.Add((int)NextStepType.InjectionJT);
                    if (propertyAdvanceConditionModel.NextStep.Jk) advanceCondition.NextStep.Add((int)NextStepType.InjectionJK);
                    if (advanceCondition.NextStep.Count == 0) advanceCondition.NextStep.Add(-1);
                    break;
                case 2:
                    advanceCondition.NextStep.Add((int)NextStepType.Auction);
                    break;
                case 3:
                    advanceCondition.NextStep.Add((int)NextStepType.Storeup);
                    break;
            }
            //if (propertyAdvanceConditionModel.NextStep.Self) advanceCondition.NextStep.Add((int)NextStepType.Self);
            //if (propertyAdvanceConditionModel.NextStep.StoreUp) advanceCondition.NextStep.Add((int)NextStepType.Storeup);

            //if (propertyAdvanceConditionModel.NextStep.Greenland) advanceCondition.NextStep.Add((int)NextStepType.Greenland);
            //if (propertyAdvanceConditionModel.NextStep.Auction) advanceCondition.NextStep.Add((int)NextStepType.Auction);
            //if (propertyAdvanceConditionModel.NextStep.Adjust) advanceCondition.NextStep.Add((int)NextStepType.Adjust);
            //if (propertyAdvanceConditionModel.NextStep.House) advanceCondition.NextStep.Add((int)NextStepType.House);
            //if (advanceCondition.NextStep.Count == 8) advanceCondition.NextStep = new List<int>();

            advanceCondition.ConstructArea = new List<List<double>>();
            //foreach (var range in propertyAdvanceConditionModel.ConstructArea.Ranges)
            //{
            //    advanceCondition.ConstructArea.Add(new List<double>() { range.Min, range.Max });
            //}

            advanceCondition.LandArea = new List<List<double>>();
            //foreach (var range in propertyAdvanceConditionModel.LandArea.Ranges)
            //{
            //    advanceCondition.LandArea.Add(new List<double>() { range.Min, range.Max });
            //}

            advanceCondition.Price = new List<List<double>>();
            //foreach (var range in propertyAdvanceConditionModel.Price.Ranges)
            //{
            //    advanceCondition.Price.Add(new List<double>() { range.Min, range.Max });
            //}

            advanceCondition.LifeTime = new List<double>();
            //advanceCondition.LifeTime.Add(propertyAdvanceConditionModel.LifeTime.Min);
            //advanceCondition.LifeTime.Add(propertyAdvanceConditionModel.LifeTime.Max);

            advanceCondition.GetedDate = new List<double>();
            //if (propertyAdvanceConditionModel.GetedDate.Min != 0 && propertyAdvanceConditionModel.GetedDate.Max != 0)
            //{
            //    advanceCondition.GetedDate.Add(propertyAdvanceConditionModel.GetedDate.Min);
            //    advanceCondition.GetedDate.Add(propertyAdvanceConditionModel.GetedDate.Max);
            //}

            //if (!string.IsNullOrEmpty(propertyAdvanceConditionModel.Extent.Geo))
            //{
            //    try
            //    {
            //        advanceCondition.Extent = DbGeography.FromText(propertyAdvanceConditionModel.Extent.Geo);
            //    }
            //    catch
            //    {
            //        throw new QZCHYException("传入的范围参数不是一个正确的WKT格式的数据");
            //    }
            //}
            return advanceCondition;

        }

        /// <summary>
        /// 区间参数配置
        /// </summary>
        /// <param name="rangeStr"></param>
        /// <returns></returns>
        [NonAction]
        protected virtual RangeList PrepareRanges(string rangeStr)
        {
            var rangeList = new RangeList() { Ranges = new List<Range>() };
            if (!string.IsNullOrEmpty(rangeStr))
            {
                var rangeArr = rangeStr.Split(';');
                foreach (var range in rangeArr)
                {
                    var minAndMax = range.Split('_');
                    if (minAndMax.Length == 2)
                    {
                        var r = new Range
                        {
                            Min = Convert.ToDouble(minAndMax[0]),
                            Max = Convert.ToDouble(minAndMax[1])
                        };
                        rangeList.Ranges.Add(r);
                    }
                }
            }
            return rangeList;
        }

        [NonAction]
        protected virtual Range PrepareRange(string rangeStr)
        {
            var minAndMax = rangeStr.Split('_');
            if (minAndMax.Length == 2)
            {
                var r = new Range
                {
                    Min = Convert.ToDouble(minAndMax[0]),
                    Max = Convert.ToDouble(minAndMax[1])
                };
                return r;
            }
            return new Range { Min = 0, Max = 0 };
        }

        /// <summary>
        /// 资产是否属于当前用户的部门
        /// </summary>
        /// <param name="property"></param>
        /// <returns></returns>
        [NonAction]
        protected virtual bool PropertyBelongCurrentUser(Property property, bool exceptGovernmentHasUsers = false)
        {
            var currentUser = _workContext.CurrentAccountUser;
            var ownerGovernment = property.Government;
            if (ownerGovernment.Id == currentUser.Government.Id) return true;  //本单位
            else
            {
                var childrenGovernmentIds = _governmentService.GetGovernmentIdsByParentId(currentUser.Government.Id, exceptGovernmentHasUsers);
                return childrenGovernmentIds.Contains(ownerGovernment.Id);
            }
        }

        /// <summary>
        /// 处置申请是否可以审批
        /// </summary>
        /// <param name="state"></param>
        /// <param name="suggestionId"></param>
        /// <returns></returns>
        [NonAction]
        protected virtual bool PropertyCanApprove(PropertyApproveState state, int suggestionId)
        {
            var currentUser = _workContext.CurrentAccountUser;
            var g = _governmentService.GetGovernmentUnitById(suggestionId);
            if (g == null) return false;

            //部门审核阶段
            if (state == PropertyApproveState.DepartmentApprove)
            {
                //必须是主管单位才能审核
                var childrenGovernmentIds = _governmentService.GetGovernmentIdsByParentId(currentUser.Government.Id);
                if (!childrenGovernmentIds.Contains(currentUser.Government.Id)) childrenGovernmentIds.Add(currentUser.Government.Id);
                return childrenGovernmentIds.Contains(suggestionId) && currentUser.IsParentGovernmentorAuditor();
                //return currentUser.Government.ParentGovernmentId == 0 && currentUser.Government.Id == g.ParentGovernmentId;
            }
            else if (state == PropertyApproveState.AdminApprove)
            {
                if (g.GovernmentType == GovernmentType.Company) return currentUser.IsStateOwnerAuditor();
                else return currentUser.IsGovAuditor();
            }

            return false;
        }

        /// <summary>
        /// 是否可以编辑
        /// </summary>
        /// <param name="state"></param>
        /// <param name="suggestionId"></param>
        /// <returns></returns>
        [NonAction]
        protected virtual bool PropertyApproveCanEditDeleteAndSubmit(PropertyApproveState state, int suggestionId)
        {
            var currentUser = _workContext.CurrentAccountUser;

            if (state != PropertyApproveState.Start) return false;

            //必须是申请的人才有权限
            return suggestionId == currentUser.Government.Id;
        }

        /// <summary>
        /// 资产是否可以查看
        /// </summary>
        /// <param name="property"></param>
        /// <returns></returns>
        [NonAction]
        protected virtual bool PropertyCanView(Property property)
        {
            return PropertyBelongCurrentUser(property, false);
        }


        /// <summary>
        /// 资产是否可以编辑
        /// </summary>
        /// <param name="property"></param>
        /// <returns></returns>
        [NonAction]
        protected virtual bool PropertyCanEditDelete(Property property)
        {
            var currentUser = _workContext.CurrentAccountUser;
            if (currentUser.IsAdmin() || currentUser.IsGovAuditor() || currentUser.IsStateOwnerAuditor() || currentUser.IsDataReviewer()) return false;  //超管等角色不能进行资产处置

            if (PropertyBelongCurrentUser(property, true))
            {
                return !property.Published && !property.Off;
            }

            return false;
        }

        /// <summary>
        /// 资产是否可以变更
        /// </summary>
        /// <param name="property"></param>
        /// <returns></returns>
        [NonAction]
        protected virtual bool PropertyCanChange(Property property)
        {
            var currentUser = _workContext.CurrentAccountUser;
            if (currentUser.IsAdmin() || currentUser.IsGovAuditor() || currentUser.IsStateOwnerAuditor() || currentUser.IsDataReviewer()) return false;  //超管等角色不能进行资产处置

            if (PropertyBelongCurrentUser(property, true))
            {
                var edits = _propertyEditService.GetPropertyEditByPropertyId(property.Id);

                if (edits.Count > 0)
                {
                    var startEdits = edits.Where(e => e.State == PropertyApproveState.Start);
                    var finishEdits = edits.Where(e => e.State == PropertyApproveState.Finish);

                    if (edits.Count == finishEdits.Count() + startEdits.Count())
                    {
                        return (startEdits.Count() == 0 || startEdits.Count() == 1) && property.Published;
                    }
                }
                else
                {
                    return property.Published && !property.Locked;
                }
            }

            return false;
        }

        [NonAction]
        protected virtual CopyProperty CopyPropertyChange(CopyProperty copy, PropertyCreateModel propertyCreateModel, Property property, Picture logoPicture)
        {
            copy.GetedDate = Convert.ToDateTime(propertyCreateModel.GetedDate);
            copy.PropertyID = property.PropertyID;
            copy.Government_Id = property.Government.Id;

            var DBLocaltion = DbGeography.FromText(propertyCreateModel.Location);
            var xq = DbGeography.FromText(xqregion);
            var kc = DbGeography.FromText(kcegion);
            var qj = DbGeography.FromText(qjregion);
            var lcq = DbGeography.FromText(lcqregion);
            var jjq = DbGeography.FromText(jjqregion);

            if (xq.Intersects(DBLocaltion))
            {
                copy.Region = Region.West;
            }
            else if (kc.Intersects(DBLocaltion))
            {
                copy.Region = Region.KC;
            }

            else if (qj.Intersects(DBLocaltion))
            {
                copy.Region = Region.QJ;
            }
            else if (jjq.Intersects(DBLocaltion))
            {
                copy.Region = Region.Clusters;
            }
            else if (lcq.Intersects(DBLocaltion))
            {
                copy.Region = Region.OldCity;
            }

            //  copy.Region = propertyCreateModel.re
            copy.Property_Id = property.Id;

            copy.PrictureIds = string.Join("_", propertyCreateModel.Pictures.Select(p => p.PictureId).ToArray());
            copy.FileIds = string.Join("_", propertyCreateModel.Files.Select(p => p.FileId).ToArray());
            if (logoPicture != null) copy.LogoPicture_Id = logoPicture.Id;
            return copy;
        }

        [NonAction]
        protected virtual void PreparePropertyPictures(PropertyCreateModel propertyCreateModel)
        {
            propertyCreateModel.Pictures = propertyCreateModel.Pictures.Where(p => !p.IsLogo).ToList();

            foreach (var propertyPictureModel in propertyCreateModel.Pictures)
            {
                propertyPictureModel.Href = _pictureService.GetPictureUrl(propertyPictureModel.PictureId);
            }

            propertyCreateModel.Pictures = propertyCreateModel.Pictures.OrderBy(pp => pp.DisplayOrder).ToList();
        }

        [NonAction]
        protected virtual void PreparePropertyPictures(PropertyModel propertyModel)
        {
            propertyModel.Pictures = propertyModel.Pictures.Where(p => !p.IsLogo).ToList();

            foreach (var propertyPictureModel in propertyModel.Pictures)
            {
                propertyPictureModel.Href = _pictureService.GetPictureUrl(propertyPictureModel.PictureId);
            }

            propertyModel.Pictures = propertyModel.Pictures.OrderBy(pp => pp.DisplayOrder).ToList();
        }

        [NonAction]
        protected virtual void PreparePropertyFiles(PropertyModel propertyModel)
        {
            foreach (var propertyFileModel in propertyModel.Files)
            {
                propertyFileModel.Src = _fileService.GetFileUrl(propertyFileModel.FileId);
                propertyFileModel.Uploaded = true;
                propertyFileModel.Percentage = 100;
            }
        }

        [NonAction]
        protected virtual void PreparePropertyFiles(PropertyCreateModel propertyCreateModel)
        {
            foreach (var propertyFileModel in propertyCreateModel.Files)
            {
                propertyFileModel.Src = _fileService.GetFileUrl(propertyFileModel.FileId);
                propertyFileModel.Uploaded = true;
                propertyFileModel.Percentage = 100;
            }
        }

        [NonAction]
        protected virtual void SavePropertyPictures(Property property, IEnumerable<PropertyPictureModel> propertyPictures)
        {
            var existingPropertyPictures = property.Pictures.ToList();
            var propertyPicturesToRemove = new List<PropertyPicture>();

            //获取要删除的图片
            foreach (var existingPropertyPicture in existingPropertyPictures)
            {
                if (existingPropertyPicture.IsLogo) continue;  //不要删logo

                if (propertyPictures.Where(pp => pp.Id == existingPropertyPicture.Id).Count() == 0)
                {
                    propertyPicturesToRemove.Add(existingPropertyPicture);
                }
            }

            foreach (var newPropertyPictureModel in propertyPictures)
            {
                var propertyPicture = newPropertyPictureModel.ToEntity();

                if (newPropertyPictureModel.Id == 0) property.Pictures.Add(propertyPicture);
            }

            //删除不存在的图片
            foreach (var propertyPicture in propertyPicturesToRemove)
            {
                _propertyService.DeletePropertyPicture(propertyPicture);
                //property.Pictures.Remove(propertyPicture);
            }
        }

        #region 图片处理
        [NonAction]
        protected virtual void SavePropertyFiles(Property property, IEnumerable<PropertyFileModel> propertyFiles)
        {
            var existingPropertyFiles = property.Files.ToList();
            var propertyFilesToRemove = new List<PropertyFile>();

            //获取要删除的文件
            foreach (var existingPropertyFile in existingPropertyFiles)
            {
                if (propertyFiles.Where(pp => pp.Id == existingPropertyFile.Id).Count() == 0)
                {
                    propertyFilesToRemove.Add(existingPropertyFile);
                }
            }

            foreach (var newPropertyFileModel in propertyFiles)
            {
                var propertyFile = newPropertyFileModel.ToEntity();

                if (newPropertyFileModel.Id == 0) property.Files.Add(propertyFile);
            }

            //删除不存在的图片
            foreach (var propertyFile in propertyFilesToRemove)
            {
                _propertyService.DeletePropertyFile(propertyFile);
            }
        }

        [NonAction]
        protected virtual void SavePropertyLendPictures(PropertyLend propertyLend, IEnumerable<PropertyLendPictureModel> propertyLendPictures)
        {
            var existingPropertyLendPictures = propertyLend.LendPictures.ToList();
            var propertyPicturesToRemove = new List<PropertyLendPicture>();

            //获取要删除的图片
            foreach (var existingPropertyLendPicture in existingPropertyLendPictures)
            {
                if (propertyLendPictures.Where(pp => pp.Id == existingPropertyLendPicture.Id).Count() == 0)
                {
                    propertyPicturesToRemove.Add(existingPropertyLendPicture);
                }
            }

            foreach (var newPropertyLendPictureModel in propertyLendPictures)
            {
                var propertyPicture = newPropertyLendPictureModel.ToEntity();

                if (newPropertyLendPictureModel.Id == 0) propertyLend.LendPictures.Add(propertyPicture);
            }

            //删除不存在的图片
            foreach (var propertyLendPicture in propertyPicturesToRemove)
            {
                _propertyLendService.DeletePropertyLendPicture(propertyLendPicture);
            }
        }

        [NonAction]
        protected virtual void SavePropertyLendFiles(PropertyLend property, IEnumerable<PropertyLendFileModel> propertyLendFiles)
        {
            var existingPropertyLendFiles = property.LendFiles.ToList();
            var propertyLendFilesToRemove = new List<PropertyLendFile>();

            //获取要删除的文件
            foreach (var existingPropertyLendFile in existingPropertyLendFiles)
            {
                if (propertyLendFiles.Where(pp => pp.Id == existingPropertyLendFile.Id).Count() == 0)
                {
                    propertyLendFilesToRemove.Add(existingPropertyLendFile);
                }
            }

            foreach (var newPropertyFileModel in propertyLendFiles)
            {
                var propertyFile = newPropertyFileModel.ToEntity();

                if (newPropertyFileModel.Id == 0) property.LendFiles.Add(propertyFile);
            }

            //删除不存在的图片
            foreach (var propertyLendFile in propertyLendFilesToRemove)
            {
                _propertyLendService.DeletePropertyLendFile(propertyLendFile);
            }
        }

        [NonAction]
        protected virtual void SavePropertyRentPictures(PropertyRent propertyRent, IEnumerable<PropertyRentPictureModel> propertyRentPictures)
        {
            var existingPropertyRentPictures = propertyRent.RentPictures.ToList();
            var propertyPicturesToRemove = new List<PropertyRentPicture>();

            //获取要删除的图片
            foreach (var existingPropertyRentPicture in existingPropertyRentPictures)
            {
                if (propertyRentPictures.Where(pp => pp.Id == existingPropertyRentPicture.Id).Count() == 0)
                {
                    propertyPicturesToRemove.Add(existingPropertyRentPicture);
                }
            }

            foreach (var newPropertyRentPictureModel in propertyRentPictures)
            {
                var propertyPicture = newPropertyRentPictureModel.ToEntity();

                if (newPropertyRentPictureModel.Id == 0) propertyRent.RentPictures.Add(propertyPicture);
            }

            //删除不存在的图片
            foreach (var propertyRentPicture in propertyPicturesToRemove)
            {
                _propertyRentService.DeletePropertyRentPicture(propertyRentPicture);
            }
        }

        [NonAction]
        protected virtual void SavePropertyRentFiles(PropertyRent property, IEnumerable<PropertyRentFileModel> propertyRentFiles)
        {
            var existingPropertyRentFiles = property.RentFiles.ToList();
            var propertyRentFilesToRemove = new List<PropertyRentFile>();

            //获取要删除的文件
            foreach (var existingPropertyRentFile in existingPropertyRentFiles)
            {
                if (propertyRentFiles.Where(pp => pp.Id == existingPropertyRentFile.Id).Count() == 0)
                {
                    propertyRentFilesToRemove.Add(existingPropertyRentFile);
                }
            }

            foreach (var newPropertyFileModel in propertyRentFiles)
            {
                var propertyFile = newPropertyFileModel.ToEntity();

                if (newPropertyFileModel.Id == 0) property.RentFiles.Add(propertyFile);
            }

            //删除不存在的图片
            foreach (var propertyRentFile in propertyRentFilesToRemove)
            {
                _propertyRentService.DeletePropertyRentFile(propertyRentFile);
            }
        }

        [NonAction]
        protected virtual void SavePropertyAllotPictures(PropertyAllot propertyAllot, IEnumerable<PropertyAllotPictureModel> propertyAllotPictures)
        {
            var existingPropertyAllotPictures = propertyAllot.AllotPictures.ToList();
            var propertyPicturesToRemove = new List<PropertyAllotPicture>();

            //获取要删除的图片
            foreach (var existingPropertyAllotPicture in existingPropertyAllotPictures)
            {
                if (propertyAllotPictures.Where(pp => pp.Id == existingPropertyAllotPicture.Id).Count() == 0)
                {
                    propertyPicturesToRemove.Add(existingPropertyAllotPicture);
                }
            }

            foreach (var newPropertyAllotPictureModel in propertyAllotPictures)
            {
                var propertyPicture = newPropertyAllotPictureModel.ToEntity();

                if (newPropertyAllotPictureModel.Id == 0) propertyAllot.AllotPictures.Add(propertyPicture);
            }

            //删除不存在的图片
            foreach (var propertyAllotPicture in propertyPicturesToRemove)
            {
                _propertyAllotService.DeletePropertyAllotPicture(propertyAllotPicture);
            }
        }

        [NonAction]
        protected virtual void SavePropertyAllotFiles(PropertyAllot property, IEnumerable<PropertyAllotFileModel> propertyAllotFiles)
        {
            var existingPropertyAllotFiles = property.AllotFiles.ToList();
            var propertyAllotFilesToRemove = new List<PropertyAllotFile>();

            //获取要删除的文件
            foreach (var existingPropertyAllotFile in existingPropertyAllotFiles)
            {
                if (propertyAllotFiles.Where(pp => pp.Id == existingPropertyAllotFile.Id).Count() == 0)
                {
                    propertyAllotFilesToRemove.Add(existingPropertyAllotFile);
                }
            }

            foreach (var newPropertyFileModel in propertyAllotFiles)
            {
                var propertyFile = newPropertyFileModel.ToEntity();

                if (newPropertyFileModel.Id == 0) property.AllotFiles.Add(propertyFile);
            }

            //删除不存在的图片
            foreach (var propertyAllotFile in propertyAllotFilesToRemove)
            {
                _propertyAllotService.DeletePropertyAllotFile(propertyAllotFile);
            }
        }

        [NonAction]
        protected virtual void SavePropertyOffPictures(PropertyOff propertyOff, IEnumerable<PropertyOffPictureModel> propertyOffPictures)
        {
            var existingPropertyOffPictures = propertyOff.OffPictures.ToList();
            var propertyPicturesToRemove = new List<PropertyOffPicture>();

            //获取要删除的图片
            foreach (var existingPropertyOffPicture in existingPropertyOffPictures)
            {
                if (propertyOffPictures.Where(pp => pp.Id == existingPropertyOffPicture.Id).Count() == 0)
                {
                    propertyPicturesToRemove.Add(existingPropertyOffPicture);
                }
            }

            foreach (var newPropertyOffPictureModel in propertyOffPictures)
            {
                var propertyPicture = newPropertyOffPictureModel.ToEntity();

                if (newPropertyOffPictureModel.Id == 0) propertyOff.OffPictures.Add(propertyPicture);
            }

            //删除不存在的图片
            foreach (var propertyOffPicture in propertyPicturesToRemove)
            {
                _propertyOffService.DeletePropertyOffPicture(propertyOffPicture);
            }
        }

        [NonAction]
        protected virtual void SavePropertyOffFiles(PropertyOff property, IEnumerable<PropertyOffFileModel> propertyOffFiles)
        {
            var existingPropertyOffFiles = property.OffFiles.ToList();
            var propertyOffFilesToRemove = new List<PropertyOffFile>();

            //获取要删除的文件
            foreach (var existingPropertyOffFile in existingPropertyOffFiles)
            {
                if (propertyOffFiles.Where(pp => pp.Id == existingPropertyOffFile.Id).Count() == 0)
                {
                    propertyOffFilesToRemove.Add(existingPropertyOffFile);
                }
            }

            foreach (var newPropertyFileModel in propertyOffFiles)
            {
                var propertyFile = newPropertyFileModel.ToEntity();

                if (newPropertyFileModel.Id == 0) property.OffFiles.Add(propertyFile);
            }

            //删除不存在的图片
            foreach (var propertyOffFile in propertyOffFilesToRemove)
            {
                _propertyOffService.DeletePropertyOffFile(propertyOffFile);
            }
        }
        #endregion

        [NonAction]
        protected virtual void PreparePropertyLendPicturesAndFiles(PropertyLendModel propertyLendModel)
        {
            propertyLendModel.LendPictures = propertyLendModel.LendPictures.ToList();

            foreach (var propertyPictureModel in propertyLendModel.LendPictures)
            {
                propertyPictureModel.Href = _pictureService.GetPictureUrl(propertyPictureModel.PictureId);
            }

            propertyLendModel.LendPictures = propertyLendModel.LendPictures.OrderBy(pp => pp.DisplayOrder).ToList();

            foreach (var propertyLendFileModel in propertyLendModel.LendFiles)
            {
                propertyLendFileModel.Src = _fileService.GetFileUrl(propertyLendFileModel.FileId);
                propertyLendFileModel.Uploaded = true;
                propertyLendFileModel.Percentage = 100;
            }
        }

        [NonAction]
        protected virtual void PreparePropertyRentPicturesAndFiles(PropertyRentModel propertyRentModel)
        {
            propertyRentModel.RentPictures = propertyRentModel.RentPictures.ToList();

            foreach (var propertyPictureModel in propertyRentModel.RentPictures)
            {
                propertyPictureModel.Href = _pictureService.GetPictureUrl(propertyPictureModel.PictureId);
            }

            propertyRentModel.RentPictures = propertyRentModel.RentPictures.OrderBy(pp => pp.DisplayOrder).ToList();

            foreach (var propertyRentFileModel in propertyRentModel.RentFiles)
            {
                propertyRentFileModel.Src = _fileService.GetFileUrl(propertyRentFileModel.FileId);
                propertyRentFileModel.Uploaded = true;
                propertyRentFileModel.Percentage = 100;
            }
        }

        [NonAction]
        protected virtual void PreparePropertyAllotPicturesAndFiles(PropertyAllotModel propertyAllotModel)
        {
            propertyAllotModel.AllotPictures = propertyAllotModel.AllotPictures.ToList();

            foreach (var propertyPictureModel in propertyAllotModel.AllotPictures)
            {
                propertyPictureModel.Href = _pictureService.GetPictureUrl(propertyPictureModel.PictureId);
            }

            propertyAllotModel.AllotPictures = propertyAllotModel.AllotPictures.OrderBy(pp => pp.DisplayOrder).ToList();

            foreach (var propertyAllotFileModel in propertyAllotModel.AllotFiles)
            {
                propertyAllotFileModel.Src = _fileService.GetFileUrl(propertyAllotFileModel.FileId);
                propertyAllotFileModel.Uploaded = true;
                propertyAllotFileModel.Percentage = 100;
            }
        }

        [NonAction]
        protected virtual void PreparePropertyOffPicturesAndFiles(PropertyOffModel propertyOffModel)
        {
            propertyOffModel.OffPictures = propertyOffModel.OffPictures.ToList();

            foreach (var propertyPictureModel in propertyOffModel.OffPictures)
            {
                propertyPictureModel.Href = _pictureService.GetPictureUrl(propertyPictureModel.PictureId);
            }

            propertyOffModel.OffPictures = propertyOffModel.OffPictures.OrderBy(pp => pp.DisplayOrder).ToList();

            foreach (var propertyOffFileModel in propertyOffModel.OffFiles)
            {
                propertyOffFileModel.Src = _fileService.GetFileUrl(propertyOffFileModel.FileId);
                propertyOffFileModel.Uploaded = true;
                propertyOffFileModel.Percentage = 100;
            }
        }

        [NonAction]
        protected virtual PropertyPicture GetLogoPicture(Property property)
        {

            //获取logo图片
            var logoPicture = property.Pictures.Where(sp => sp.IsLogo).SingleOrDefault();

            return logoPicture;
        }

        [NonAction]
        protected virtual string GetLogoUrl(Property property)
        {
            string logoUrl = string.Empty;
            //获取logo图片
            var logoPicture = GetLogoPicture(property);
            if (logoPicture != null)
            {
                logoUrl = _pictureService.GetPictureUrl(logoPicture.PictureId);
            }

            return logoUrl;
        }

        /// <summary>
        /// 资产锁定状态切换
        /// </summary>
        /// <param name="locked"></param>
        /// <param name="property"></param>
        protected virtual void SwitchPropertyLockState(bool locked, Property property)
        {
            if (property.Locked != locked)
            {
                property.Locked = locked; //资产被锁定，无法进行其他操作
                _propertyService.UpdateProperty(property);

                //activity log
                _accountUserActivityService.InsertActivity("LockPropertySwitch", "{1} 名为 {0} 的资产", property.Name, locked ? "锁定" : "解锁");
            }
        }

        #endregion

        #region 资产API
        [HttpGet]
        [Route("Unique/{name}")]
        public IHttpActionResult UniqueCheck(string name)
        {
            var result = !_propertyService.NameUniqueCheck(name);

            return Ok(result);
        }

        [HttpGet]
        [Route("{propertyId:int}")]
        public IHttpActionResult Get(int propertyId)
        {
            var currentUser = _workContext.CurrentAccountUser;

            var property = _propertyService.GetPropertyById(propertyId);
            if (property == null || property.Deleted)
                return NotFound();

            if (!(currentUser.IsAdmin()|| currentUser.IsDataReviewer() || PropertyCanView(property))) 
                return NotFound();
            //var index = 1;
            //foreach (var rent in property.Rents) {
            //    if (rent != null)
            //    {
            //        var priceList = rent.PriceString.Split(';');
            //        rent.PriceString = "";
            //        foreach (var price in priceList)
            //        {
            //            if (!string.IsNullOrEmpty(price)) {
            //                rent.PriceString += string.Format("第{0}年租金{1}元;", index, price);
            //                index++;
            //            }                       
            //        }
            //    }
            //}

            var model = property.ToModel();
            model.LogoUrl = GetLogoUrl(property);
            model.NewCreate = _propertyNewCreateService.GetPropertyNewCreateByPropertyId(model.Id).ToModel();

            model.CanEditDelete = PropertyCanEditDelete(property);
            model.CanChange = PropertyCanChange(property);
            var propertyOff= _propertyOffService.GetPropertyOffById(model.Id).ToModel();
            if (propertyOff != null) model.PropertyOff = propertyOff;

            //获取图片
            PreparePropertyPictures(model);
            //获取文件
            PreparePropertyFiles(model);
            //activity log
            _accountUserActivityService.InsertActivity("GetpropertyInfo", "获取 名为 {0} 的资产信息", property.Name);

            return Ok(model);
        }

        /// <summary>
        /// 获取要更新的资产
        /// </summary>
        /// <param name="propertyId"></param>
        /// <returns></returns>
        [HttpGet]
        [Route("Update/{propertyId:int}")]
        public IHttpActionResult GetUpdatedProperty(int propertyId)
        {
            var currentUser = _workContext.CurrentAccountUser;

            var property = _propertyService.GetPropertyById(propertyId);
            if (property == null || property.Deleted)
                return NotFound();

            if (!PropertyCanEditDelete(property) && !PropertyCanChange(property)) return NotFound();// "资产无法编辑或变更！");

            var propertyCreatModel = new PropertyCreateModel();

            var edit = property.Edits.Where(e => e.State == PropertyApproveState.Start && !e.Deleted).FirstOrDefault();
            if (edit != null) {
                var copyproperty = _copyPropertyService.GetCopyPropertyById(edit.CopyProperty_Id);
                propertyCreatModel = copyproperty.ToCreateModel();

                propertyCreatModel.Owner_self = propertyCreatModel.GovernmentId == currentUser.Government.Id;
                propertyCreatModel.Owner_children = propertyCreatModel.Owner_self;

                #region 新数据库对象
                #region 获取图片
                propertyCreatModel.Pictures = new List<PropertyPictureModel>();
                foreach (var pid in copyproperty.PrictureIds.Split('_'))
                {
                    if (string.IsNullOrWhiteSpace(pid)) continue;
                    var picture = _pictureService.GetPictureById(Convert.ToInt32(pid));
                    if (picture == null) continue;

                    var propertyPictureModel = new PropertyPictureModel
                    {
                        PictureId = picture.Id,
                        PropertyId = copyproperty.Id,
                        Href = _pictureService.GetPictureUrl(picture.Id),
                        Title = picture.TitleAttribute
                    };

                    propertyCreatModel.Pictures.Add(propertyPictureModel);
                }
                #endregion

                #region 文件更新
                propertyCreatModel.Files = new List<PropertyFileModel>();
                foreach (var fid in copyproperty.FileIds.Split('_'))
                {
                    if (string.IsNullOrWhiteSpace(fid)) continue;
                    var file = _fileService.GetFileById(Convert.ToInt32(fid));
                    if (file == null) continue;

                    var propertyFileModel = new PropertyFileModel
                    {
                        FileId = file.Id,
                        PropertyId = copyproperty.Id,
                        Src = _fileService.GetFileUrl(file),
                        Title = file.Name,
                        Percentage = 100,
                        Uploaded = true
                    };

                    propertyCreatModel.Files.Add(propertyFileModel);
                }

                #endregion
                var logoUrl= _pictureService.GetPictureUrl(copyproperty.LogoPicture_Id);
                propertyCreatModel.LogoUrl = string.IsNullOrEmpty(logoUrl) ? null : logoUrl;
                propertyCreatModel.Logo = null;
                propertyCreatModel.LogoPictureId = copyproperty.LogoPicture_Id;
                #endregion
            }   
            else 
            {
                //if (!currentUser.IsAdmin() && !(property.Government.Id == currentUser.Government.Id || property.Government.ParentGovernmentId == currentUser.Government.Id)
                //    return NotFound();

                propertyCreatModel = property.ToCreateModel();
                propertyCreatModel.Owner_self = propertyCreatModel.GovernmentId == currentUser.Government.Id;
                propertyCreatModel.Owner_children = propertyCreatModel.Owner_self;
                propertyCreatModel.LogoUrl = string.IsNullOrEmpty(GetLogoUrl(property)) ? null : GetLogoUrl(property);
                var propertyLogoPicture = GetLogoPicture(property);
                propertyCreatModel.LogoPictureId = propertyLogoPicture == null ? 0 : propertyLogoPicture.PictureId;
                propertyCreatModel.Logo = null;
                //获取图片
                PreparePropertyPictures(propertyCreatModel);

                //获取文件
                PreparePropertyFiles(propertyCreatModel);

                //activity log
                _accountUserActivityService.InsertActivity("GetpropertyInfo", "获取 名为 {0} 的资产信息", property.Name);
            }

            return Ok(propertyCreatModel);
        }

        [HttpGet]
        [Route("")]
        public IHttpActionResult GetAll(string query = "", string sort = "", int pageSize = Int32.MaxValue, int pageIndex = 0, bool showHidden = false, long time = 0,
            bool manage = false, bool isGovernment = false, bool isInstitution = false, bool isCompany = false, int selectedId = 0,
            bool construct = false, bool land = false, bool constructOnLand = false,//资产类型
            bool old = false, bool west = false, bool jjq = false, bool kc = false, bool qj = false, bool other = false, //区域
            bool certi_both = false, bool certi_land = false, bool certi_construct = false, bool certi_none = false, //证书情况
            bool current_self = false, bool current_rent = false, bool current_lend = false, bool currnet_idle = false, //使用现状
            bool auction = false, bool ct = false, bool jt = false, bool jk = false, bool self = false, bool storeUp = false, bool adjust = false, bool greenland = false, bool house = false//下步使用
                                                                                                                                                                                             //   string constructAreaRange = "", string landAreaRange = "", string priceRange = "", string getDateRange=""  //范围参数
            )
        {
            var currentUser = _workContext.CurrentAccountUser;

            showHidden = currentUser.IsRegistered() && !(currentUser.IsAdmin() || currentUser.IsGovAuditor() || currentUser.IsStateOwnerAuditor() || currentUser.IsDataReviewer());   //只是注册单位可以获取未发布的

            //初始化排序条件
            var sortConditions = PropertySortCondition.Instance(sort);

            //特殊字段排序调整
            if (sort.ToLower().StartsWith("governmentname")) sortConditions[0].PropertyName = "Government";

            //高级搜索参数设置
            PropertyAdvanceConditionModel advance = new PropertyAdvanceConditionModel
            {
                Government = new GovernmentFilterModel { Manage = manage, IsCompany = isCompany, IsGovernment = isGovernment, IsInstitution = isInstitution, SelectedId = selectedId },
                PropertyType = new PropertyTypeModel { Construct = construct, Land = land, ConstructOnLand = constructOnLand },
                Region = new RegionModel { West = west, Jjq = jjq, Kc = kc, Old = old, Other = other, Qj = qj },
                Certificate = new Certificate { Both = certi_both, Construct = certi_construct, Land = certi_land, None = certi_land },
                Current = new CurrentModel { Idle = currnet_idle, Lend = current_lend, Rent = current_rent, Self = current_self },
                NextStep = new NextStepModel { Adjust = adjust, Auction = auction, Ct = ct, Jt = jt, Jk = jk, Greenland = greenland, House = house, Self = self, StoreUp = storeUp }
            };

            //advance.ConstructArea = PrepareRanges(constructAreaRange);
            //advance.LandArea = PrepareRanges(landAreaRange);
            //advance.Price = PrepareRanges(priceRange);
            //advance.GetedDate = PrepareRange(getDateRange);

            //高级搜索参数设置
            PropertyAdvanceConditionRequest request = PrepareAdvanceCondition(advance);

            var governmentIds =_governmentService.GetGovernmentIdsByCurrentUser();  //获取当前账户的可查询的资产
           
            var properties = _propertyService.GetAllProperties(governmentIds, query, pageIndex, pageSize,
               showHidden, request, sortConditions);

            var response = new ListResponse<PropertyListModel>
            {
                Time = time,
                Paging = new Paging
                {
                    PageIndex = pageIndex,
                    PageSize = pageSize,
                    Total = properties.TotalCount,
                    FilterCount = string.IsNullOrEmpty(query) ? properties.TotalCount : properties.Count,
                },
                Data = properties.Select(s =>
                {
                    var propertyModel = s.ToListModel();
                    if (s.Off)
                        propertyModel.Name = propertyModel.Name + "（已核销）";
                    else if (!s.Published)
                        propertyModel.Name = propertyModel.Name + "（未发布）";


                    propertyModel.CanEditDelete = PropertyCanEditDelete(s);
                    propertyModel.CanChange = PropertyCanChange(s);

                    return propertyModel;
                })
            };

            //activity log
            _accountUserActivityService.InsertActivity("GetpropertyList", "获取资产列表信息");

            return Ok(response);
        }


        [HttpPost]
        [Route("")]
        public IHttpActionResult GetAll(PropertyAdvanceConditionModel advance)
        {
            var currentUser = _workContext.CurrentAccountUser;

      var      showHidden = currentUser.IsRegistered() && !(currentUser.IsAdmin() || currentUser.IsGovAuditor() || currentUser.IsStateOwnerAuditor() || currentUser.IsDataReviewer());   //只是注册单位可以获取未发布的

            //初始化排序条件
            var sortConditions = PropertySortCondition.Instance(advance.Sort);

            //特殊字段排序调整
            if (advance.Sort.ToLower().StartsWith("governmentname")) sortConditions[0].PropertyName = "Government";

            //高级搜索参数设置
            PropertyAdvanceConditionRequest request = PrepareAdvanceCondition(advance);

            var governmentIds = _governmentService.GetGovernmentIdsByCurrentUser();  //获取当前账户的可查询的资产

            var properties = _propertyService.GetAllProperties(governmentIds,advance.Query, advance.PageIndex, advance.PageSize,
                showHidden, request, sortConditions);

            var response = new ListResponse<PropertyModel>
            {
                Time = advance.Time,
                Paging = new Paging
                {
                    PageIndex = advance.PageIndex,
                    PageSize = advance.PageSize,
                    Total = properties.TotalCount,
                    FilterCount = string.IsNullOrEmpty(advance.Query) ? properties.TotalCount : properties.Count,
                },
                Data = properties.Select(s =>
                {
                    var propertyModel = s.ToModel();
                    if (!propertyModel.Published) propertyModel.Name += "（未发布）";
                    else if (!s.Off) propertyModel.Name += "（已核销）";
                    return propertyModel;
                })
            };

            //activity log
            _accountUserActivityService.InsertActivity("GetpropertyList", "获取资产列表信息");

            return Ok(response);
        }

        /// <summary>
        /// 地图中的搜索
        /// </summary>
        /// <param name="query"></param>
        /// <param name="sort"></param>
        /// <param name="pageSize"></param>
        /// <param name="pageIndex"></param>
        /// <param name="showHidden"></param>
        /// <returns></returns>
        [HttpPost]
        [Route("geo")]
        public IHttpActionResult GetAllInMap(PropertyAdvanceConditionModel advance)
        {
            var currentUser = _workContext.CurrentAccountUser;

            var showHidden = currentUser.IsRegistered() && currentUser.AccountUserRoles.Count == 1;  //只是注册单位可以获取未发布的

            //初始化排序条件
            var sortConditions = PropertySortCondition.Instance(advance.Sort);

            //特殊字段排序调整
            if (advance.Sort.ToLower().StartsWith("governmentname")) sortConditions[0].PropertyName = "Government";

            //高级搜索参数设置
            PropertyAdvanceConditionRequest request = PrepareAdvanceCondition(advance);
            var governmentIds = _governmentService.GetGovernmentIdsByCurrentUser();  //获取当前账户的可查询的资产
            var properties = _propertyService.GetAllProperties(governmentIds, advance.Query, 0, int.MaxValue, showHidden, request, sortConditions);

            var response = new ListResponse<GeoPropertyModel>
            {
                Time = advance.Time,
                Paging = new Paging
                {
                    PageIndex = 0,
                    PageSize = int.MaxValue,
                    Total = properties.TotalCount,
                    FilterCount = string.IsNullOrEmpty(advance.Query) ? properties.TotalCount : properties.Count,
                },
                Data = properties.Select(s =>
                {
                    var geoPropertyModel = s.ToGeoModel();
                    if (!s.Published) geoPropertyModel.Name += "（未发布）";
                    else if (!s.Off) geoPropertyModel.Name += "（已核销）";
                    return geoPropertyModel;
                })
            };

            //activity log
            _accountUserActivityService.InsertActivity("GetpropertyList", "获取资产列表信息");

            return Ok(response);
        }

        /// <summary>
        /// 获取地图大数据
        /// </summary>
        /// <returns></returns>
        [HttpGet]
        [Route("geo/bigdata")]
        public IHttpActionResult GetMapBigData()
        {
            var currentUser = _workContext.CurrentAccountUser;
            var showHidden = currentUser.IsRegistered() && currentUser.AccountUserRoles.Count == 1;
            var governmentIds = _governmentService.GetGovernmentIdsByCurrentUser();
            var properties = _propertyService.GetAllProperties(governmentIds, showHidden);

            var mapProperties = properties.ToList().Select(p => { return p.ToGeoModel(); });

            //activity log
            _accountUserActivityService.InsertActivity("GetGeopropertyList", "地图获取资产列表信息");

            return Ok(mapProperties);
        }

        /// <summary>
        /// 搜索联想提示
        /// </summary>
        /// <param name="query"></param>
        /// <param name="pageSize"></param>
        /// <param name="showHidden"></param>
        /// <returns></returns>
        [HttpGet]
        [Route("geo/suggestion")]
        public IHttpActionResult Suggestion(string query = "",long time=0, int pageSize = 10, bool showHidden = false)
        {
            var currentUser = _workContext.CurrentAccountUser;

            var governmentIds = _governmentService.GetGovernmentIdsByCurrentUser();

            var properties = _propertyService.GetAllProperties(governmentIds, query, 0, pageSize, false);

            var response = new ListResponse<GeoPropertyModel>
            {
                Time = time,
                Paging = new Paging
                {
                    PageIndex = 0,
                    PageSize = int.MaxValue,
                    Total = properties.TotalCount,
                    FilterCount = properties.TotalCount,
                },
                Data = properties.Select(s =>
                {
                    return s.ToGeoModel();
                })
            };

            //activity log
            _accountUserActivityService.InsertActivity("PropertySuggestion", "资产信息关键字联想");

            return Ok(response);
        }

        /// <summary>
        /// 新增资产
        /// </summary>
        /// <param name="propertyModel"></param>
        /// <returns></returns>
        [HttpPost]
        [Route("Create")]
        public IHttpActionResult Create(PropertyCreateModel propertyCreateModel)
        {
            var checkMessage = PropertyCreateModelValid(propertyCreateModel);

            if (!string.IsNullOrEmpty(checkMessage)) return BadRequest(checkMessage);
           
            var property = propertyCreateModel.ToEntity();

         

            PrepareProperty(property, propertyCreateModel);
          
            _propertyService.InsertProperty(property);

            //activity log
            _accountUserActivityService.InsertActivity("AddNewproperty", "增加 名为 {0} 的资产", property.Name);

            #region 封面照片处理
            //保存图片
            var base64 = HttpUtility.HtmlDecode(propertyCreateModel.Logo.Trim());
            var picture = _pictureService.InsertPicture(base64);

            //关联
            var logoPicture = new PropertyPicture
            {
                IsLogo = true,
                Picture = picture,
                Property = property,
                DisplayOrder = 0
            };

            _propertyService.InsertPropertyPicture(logoPicture);
            //activity log
            _accountUserActivityService.InsertActivity("AddPropertyLogo", "增加 资产名为 {0} 的封面照片", property.Name);
            #endregion

            #region 附件处理

            //图片更新
            SavePropertyPictures(property, propertyCreateModel.Pictures);

            //文件更新
            SavePropertyFiles(property, propertyCreateModel.Files);

            #endregion

            //添加一个资产插入申请
            var propertyNewRecord = new PropertyNewCreate()
            {
                Property = property,
                Title = property.Name,
                State = propertyCreateModel.Submit ? PropertyApproveState.DepartmentApprove : PropertyApproveState.Start,
                ProcessDate = DateTime.Now,
                SuggestGovernmentId = _workContext.CurrentAccountUser.Government.Id
            };

            //如果当前用户是主管部门，则跳过主管部门审核环节
            if (propertyCreateModel.Submit && _workContext.CurrentAccountUser.Government.ParentGovernmentId == 0)
            {
                propertyNewRecord.State = PropertyApproveState.AdminApprove;
                propertyNewRecord.DSuggestion = "同意";
                propertyNewRecord.DApproveDate = DateTime.Now;
            }

            _propertyNewCreateService.InsertPropertyNewCreate(propertyNewRecord);

            //activity log
            _accountUserActivityService.InsertActivity("AddNewproperty", "增加 名为 {0} 的资产创建申请", property.Name);

            SwitchPropertyLockState(true, property);

            return Ok(property.ToModel());
        }

        public void PrepareCreateProperty(PropertyCreateModel property)
        {


        }


        /// <summary>
        /// 更新资产
        /// </summary>
        /// <param name="propertyModel"></param>
        /// <returns></returns>
        [HttpPut]
        [Route("{propertyId:int}")]
        public IHttpActionResult UpdateProperty(int propertyId, PropertyCreateModel propertyCreateModel)
        {
            var property = _propertyService.GetPropertyById(propertyId);

            if ((propertyCreateModel.CurrentUse_Lend + propertyCreateModel.CurrentUse_Rent + propertyCreateModel.CurrentUse_Self + propertyCreateModel.CurrentUse_Idle > propertyCreateModel.ConstructArea)) return BadRequest("建筑面积应大于自用、出租、出借、闲置之和！");

            if (property == null || property.Deleted) return NotFound();

            var checkMessage = PropertyCreateModelValid(propertyCreateModel);

            if (!string.IsNullOrEmpty(checkMessage)) return BadRequest(checkMessage);

            Picture logoPicture = null;
            if (!string.IsNullOrEmpty(propertyCreateModel.Logo))  //上传的logo 不为空则表明新增了一个logo图片
            {
                var base64 = HttpUtility.HtmlDecode(propertyCreateModel.Logo.Trim());
                logoPicture = _pictureService.InsertPicture(base64);
            }

            if (property.Published)
            {                
                if(PropertyCanChange(property))
                {
                    var startEditsCount = _propertyEditService.GetPropertyEditByPropertyId(propertyId).Count(e => e.State == PropertyApproveState.Start);
                    if (startEditsCount == 0)
                    {
                        if (property.Locked) return BadRequest("资产已被锁定，无法进行其他操作");

                        #region 新增的变更

                        //添加到资产复制表
                        CopyProperty copy = propertyCreateModel.ToCopyEntity();

                        //copyproperty赋值处理
                        copy = CopyPropertyChange(copy, propertyCreateModel, property, logoPicture);
                        copy.Government_Id = propertyCreateModel.GovernmentId;
                        _copyPropertyService.InsertCopyProperty(copy);
                        //activity log
                        _accountUserActivityService.InsertActivity("AddCopyProperty", "增加 名为 {0} 的资产的副本信息", property.Name);

                        //添加一个资产编辑申请
                        var propertyEdit = new PropertyEdit()
                        {
                            Property = property,
                            Title = property.Name,
                            State = propertyCreateModel.Submit ? PropertyApproveState.DepartmentApprove : PropertyApproveState.Start,
                            ProcessDate = DateTime.Now,
                            SuggestGovernmentId = _workContext.CurrentAccountUser.Government.Id
                        };

                        propertyEdit.CopyProperty_Id = copy.Id;
                        //如果当前用户是主管部门，则跳过主管部门审核环节
                        if (propertyCreateModel.Submit && _workContext.CurrentAccountUser.Government.ParentGovernmentId == 0)
                        {
                            propertyEdit.State = PropertyApproveState.AdminApprove;
                            propertyEdit.DSuggestion = "同意";
                            propertyEdit.DApproveDate = DateTime.Now;
                        }

                        _propertyEditService.InsertPropertyEdit(propertyEdit);

                        SwitchPropertyLockState(true, property);

                        return Ok(copy);  //返回copy对象
                        #endregion
                    }
                    else if (startEditsCount == 1)
                    {
                        #region 已有变更编辑
                        var edit = _propertyEditService.GetPropertyEditByPropertyId(propertyId).Where(e => e.State == PropertyApproveState.Start).SingleOrDefault();
                        if (edit.State == PropertyApproveState.Start)
                        {
                            var copy = _copyPropertyService.GetCopyPropertyById(edit.CopyProperty_Id);

                            copy = propertyCreateModel.ToEntity(copy);

                            copy = CopyPropertyChange(copy, propertyCreateModel, property, logoPicture);
                            copy.Government_Id = propertyCreateModel.GovernmentId;
                            _copyPropertyService.UpdateCopyProperty(copy);

                            if (propertyCreateModel.Submit) edit.State = PropertyApproveState.DepartmentApprove;

                            //如果当前用户是主管部门，则跳过主管部门审核环节
                            if (propertyCreateModel.Submit && _workContext.CurrentAccountUser.Government.ParentGovernmentId == 0)
                            {
                                edit.State = PropertyApproveState.AdminApprove;
                                edit.DSuggestion = "同意";
                                edit.DApproveDate = DateTime.Now;
                            }

                            _propertyEditService.UpdatePropertyEdit(edit);

                            SwitchPropertyLockState(true, property);
                            return Ok(copy);
                        }
                        #endregion
                    }
                }

                return BadRequest("该资产已经在进行编辑申请中，请将其执行完成后再申请！");
            }
            else {
                #region 数据编辑

                if (!PropertyCanEditDelete(property)) return BadRequest("无法编辑资产");

                var imgs = property.Pictures;
                property = propertyCreateModel.ToEntity(property);
                PrepareProperty(property, propertyCreateModel);

                #region 封面照片处理
                var logoPropertyPicture = property.Pictures.Where(p => p.IsLogo).SingleOrDefault();
                if (logoPropertyPicture == null)
                {
                    //关联
                    logoPropertyPicture = new PropertyPicture
                    {
                        IsLogo = true,
                        Picture = logoPicture,
                        Property = property,
                        DisplayOrder = 0
                    };

                    _propertyService.InsertPropertyPicture(logoPropertyPicture);
                }
                else
                {
                    if (logoPicture != null && logoPicture.Id != logoPropertyPicture.PictureId)
                    {
                        logoPropertyPicture.Picture = logoPicture;
                        _propertyService.UpdatePropertyPicture(logoPropertyPicture);
                    }
                }

                #endregion

                //图片更新
                SavePropertyPictures(property, propertyCreateModel.Pictures);

                //文件更新
                SavePropertyFiles(property, propertyCreateModel.Files);

                //保存资产
                _propertyService.UpdateProperty(property);

                //activity log
                _accountUserActivityService.InsertActivity("Updateproperty", "更新 名为 {0} 的资产的基本信息", property.Name);

                //获取相应的资产插入申请
                var propertyNewRecord = _propertyNewCreateService.GetPropertyNewCreateByPropertyId(property.Id);

                if (propertyCreateModel.Submit)
                {
                    propertyNewRecord.State = PropertyApproveState.DepartmentApprove;

                    //如果当前用户是主管部门，则跳过主管部门审核环节
                    if (_workContext.CurrentAccountUser.Government.ParentGovernmentId == 0)
                    {
                        propertyNewRecord.State = PropertyApproveState.AdminApprove;
                        propertyNewRecord.DSuggestion = "同意";
                        propertyNewRecord.DApproveDate = DateTime.Now;
                    }

                    _propertyNewCreateService.UpdatePropertyNewCreate(propertyNewRecord);

                    //activity log
                    _accountUserActivityService.InsertActivity("AddNewproperty", "增加 名为 {0} 的资产创建申请", property.Name);

                    SwitchPropertyLockState(true, property);
                }          

                return Ok(property.ToModel());
                #endregion
            }     
        }

        [HttpDelete]
        [Route("{propertyId:int}")]
        public IHttpActionResult DeleteProperty(int propertyId)
        {

            var property = _propertyService.GetPropertyById(propertyId);
            if (property == null || property.Deleted) return NotFound();

            _propertyService.DeleteProperty(property);

            //activity log
            _accountUserActivityService.InsertActivity("Deleteproperty", "删除 名为 {0} 的资产", property.Name);

            var newCreate = property.PropertyNewCreate;
            if(newCreate==null) newCreate = _propertyNewCreateService.GetPropertyNewCreateByPropertyId(property.Id);
            _propertyNewCreateService.DeletePropertyNewCreate(newCreate);            

            //通知
            //SuccessNotification(_localizationService.GetResource("Admin.Catalog.Categories.Deleted"));

            return Ok();
        }

        /// <summary>
        /// 批量删除
        /// </summary>
        /// <param name="propertyIdString"></param>
        /// <returns></returns>
        [HttpDelete]
        [Route("{propertyIdString}")]
        public IHttpActionResult Deleteproperty(string propertyIdString)
        {
            var idStringArr = propertyIdString.Split('_');
            foreach (var idStr in idStringArr)
            {
                int id = 0;
                if (!int.TryParse(idStr, out id)) continue;

                var property = _propertyService.GetPropertyById(id);
                if (property == null) continue;

                _propertyService.DeleteProperty(property);

                var newCreate = property.PropertyNewCreate;
                _propertyNewCreateService.DeletePropertyNewCreate(newCreate);
            }

            //活动日志
            _accountUserActivityService.InsertActivity("Deletepropertys", "批量删除 Id为 {0} 的资产", propertyIdString);
           
            //通知
            //SuccessNotification(_localizationService.GetResource("Admin.Catalog.Categories.Deleted"));

            return Ok();
        }


        [HttpGet]
        [Route("Governments/{governmentId}")]
        public IHttpActionResult GetPropertiesByGovernment(int governmentId, bool loadChildren = true)
        {
            var governmentIdList = new List<int>();

            if(loadChildren)
            {
                var childrenGovernments = _governmentService.GetGovernmentIdsByParentId(governmentId);
                governmentIdList.AddRange(childrenGovernments);
            }

            governmentIdList.Add(governmentId);

            var properties = _propertyService.GetPropertiesByGovernmentId(governmentIdList).ToList().Select(p =>
            {
                return new SimplePropertyModel
                {
                    Id = p.Id,
                    Name = p.Name,
                    GovernmentName = p.Government.Name
                };
            });

            return Ok(properties);
        }
        #endregion

        #region 资产处置

        [AllowAnonymous]
        [HttpGet]
        [Route("PropertyProcess")]
        public IHttpActionResult GetPropertyProcess() {

            var currentAccount = _workContext.CurrentAccountUser;
            var governmentIds = _governmentService.GetGovernmentIdsByCurrentUser(true);
           
            var properties = _propertyService.GetProcessProperties(governmentIds).Select(sp => {
                return new
                {
                    Id = sp.Id,
                    Name = sp.Name,
                    Region = sp.Region.ToDescription(),
                    Address = sp.Address,
                    G = sp.Government.Name,
                    constructArea = sp.ConstructArea,
                    landArea = sp.LandArea,
                    propertyType = sp.PropertyNature,
                    price = sp.Price,
                    lifeTime = sp.LifeTime
                };

                //return simplePropertyModel;
            });

            return Ok(properties);
        }
   

        [HttpGet]
        [Route("Process/Records")]
        public IHttpActionResult GetAllApproveRecords(string approveType = "newCreate",string checkState = "", 
            string query = "", string sort = "", int pageSize = Int32.MaxValue, int pageIndex = 0, long time = 0)
        {
            var currentUser = _workContext.CurrentAccountUser;          
            var government = currentUser.Government;

            IList<int> targetGovIds = new List<int>();

            if (currentUser.IsGovAuditor())
            {
                targetGovIds = _governmentService.GetAllGovernmentUnitsByType(
                    new GovernmentType[2] { GovernmentType.Government, GovernmentType.Institution }).Select(g => g.Id).ToList();
            }
            else if (currentUser.IsStateOwnerAuditor())
            {
                targetGovIds = _governmentService.GetAllGovernmentUnitsByType(
                    new GovernmentType[1] { GovernmentType.Company }).Select(g => g.Id).ToList();
            }
            else
            {
                targetGovIds = _governmentService.GetGovernmentIdsByParentId(government.Id, false);
                if (!targetGovIds.Contains(currentUser.Government.Id)) targetGovIds.Add(currentUser.Government.Id);
            }

            //初始化排序条件
            var sortConditions = PropertySortCondition.Instance(sort);

            switch (approveType)
            {
                case "newCreate":
                    {
                        #region 获取新增审批记录
                        var allRecords = _propertyNewCreateService.GetAllNewCreateRecords(targetGovIds, checkState, query, pageIndex,
                    pageSize, sortConditions);
                        var response = new ListResponse<PropertyNewCreateApproveListModel>
                        {
                            Time = time,
                            Paging = new Paging
                            {
                                PageIndex = pageIndex,
                                PageSize = pageSize,
                                Total = allRecords.TotalCount,
                                FilterCount = string.IsNullOrEmpty(query) ? allRecords.TotalCount : allRecords.Count,
                            },
                            Data = allRecords.Select(pcr =>
                            {
                                var pcrl = pcr.ToListModel();
                                pcrl.ApproveType = approveType;
                                pcrl.CanApprove = PropertyCanApprove(pcr.State, pcr.SuggestGovernmentId);

                                pcrl.CanEditAndDelete = PropertyApproveCanEditDeleteAndSubmit(pcr.State, pcr.SuggestGovernmentId);

                                return pcrl;
                            })
                        };
                      
                        if (currentUser.IsGovAuditor())
                        {
                         
                        }

                        //activity log
                        _accountUserActivityService.InsertActivity("GetAllNewCreateRecords", "获取相关资产新增审批列表信息");

                        return Ok(response);
                        #endregion
                    }
                case "edit":
                    {
                        #region 获取变跟审批记录
                        var allRecords = _propertyEditService.GetAllEditRecords(targetGovIds, checkState, query, pageIndex,
                    pageSize, sortConditions);
                        var response = new ListResponse<PropertyEditApproveListModel>
                        {
                            Time = time,
                            Paging = new Paging
                            {
                                PageIndex = pageIndex,
                                PageSize = pageSize,
                                Total = allRecords.TotalCount,
                                FilterCount = string.IsNullOrEmpty(query) ? allRecords.TotalCount : allRecords.Count,
                            },
                            Data = allRecords.Select(pcr =>
                            {
                                var pcrl = pcr.ToListModel();
                                pcrl.Property_Id = pcr.Property.Id;
                                pcrl.ApproveType = approveType;
                                pcrl.CanApprove = PropertyCanApprove(pcr.State, pcr.SuggestGovernmentId);

                                pcrl.CanEditAndDelete = PropertyApproveCanEditDeleteAndSubmit(pcr.State, pcr.SuggestGovernmentId);

                                return pcrl;
                            })
                        };

                        //activity log
                        _accountUserActivityService.InsertActivity("GetAllNewCreateRecords", "获取相关资产新增审批列表信息");

                        return Ok(response);
                        #endregion
                    }
                case "lend":
                    {
                        #region 获取出借审批记录
                        var allRecords = _propertyLendService.GetAllLendRecords(targetGovIds, checkState, query, pageIndex,
                    pageSize, sortConditions);
                        var response = new ListResponse<PropertyLendApproveListModel>
                        {
                            Time = time,
                            Paging = new Paging
                            {
                                PageIndex = pageIndex,
                                PageSize = pageSize,
                                Total = allRecords.TotalCount,
                                FilterCount = string.IsNullOrEmpty(query) ? allRecords.TotalCount : allRecords.Count,
                            },
                            Data = allRecords.Select(pcr =>
                            {
                                var pcrl = pcr.ToListModel();
                                pcrl.Property_Id = pcr.Property.Id;
                                pcrl.ApproveType = approveType;
                                
                                pcrl.CanApprove = PropertyCanApprove(pcr.State, pcr.SuggestGovernmentId);

                                pcrl.CanEditAndDelete = PropertyApproveCanEditDeleteAndSubmit(pcr.State, pcr.SuggestGovernmentId);

                                return pcrl;
                            })
                        };

                        //activity log
                        _accountUserActivityService.InsertActivity("GetAllLendRecords", "获取相关资产出借审批列表信息");

                        return Ok(response);
                        #endregion
                    }
                case "rent":
                    {
                        #region 获取出租审批记录
                        var allRecords = _propertyRentService.GetAllRentRecords(targetGovIds, checkState, query, pageIndex,
                    pageSize, sortConditions);
                        var response = new ListResponse<PropertyRentApproveListModel>
                        {
                            Time = time,
                            Paging = new Paging
                            {
                                PageIndex = pageIndex,
                                PageSize = pageSize,
                                Total = allRecords.TotalCount,
                                FilterCount = string.IsNullOrEmpty(query) ? allRecords.TotalCount : allRecords.Count,
                            },
                            Data = allRecords.Select(pcr =>
                            {
                                var pcrl = pcr.ToListModel();

                                pcrl.RentTime = pcr.RentTime.ToString("yyyy/MM/dd") +" - "+pcr.BackTime.ToString("yyyy/MM/dd");
                                pcrl.PriceString = "";
                                var priceList = pcr.PriceString.Split(';');
                                var index = 1;
                                foreach(var price in priceList)
                                {
                                    if (index > 2) {
                                        pcrl.PriceString += "...";
                                        break;
                                    }
                                    pcrl.PriceString += string.Format("第{0}年租金{1}元;", index, price);
                                    index++;
                                }

                                pcrl.Property_Id = pcr.Property.Id;
                                pcrl.ApproveType = approveType;
                                pcrl.CanApprove = PropertyCanApprove(pcr.State, pcr.SuggestGovernmentId);

                                pcrl.CanEditAndDelete = PropertyApproveCanEditDeleteAndSubmit(pcr.State, pcr.SuggestGovernmentId);

                                return pcrl;
                            })
                        };

                        //activity log
                        _accountUserActivityService.InsertActivity("GetAllRentRecords", "获取相关资产出租审批列表信息");

                        return Ok(response);
                        #endregion
                    }
                case "allot":
                    {
                        #region 获取划拨审批记录
                        var allRecords = _propertyAllotService.GetAllAllotRecords(targetGovIds, checkState, query, pageIndex,
                    pageSize, sortConditions);
                        var response = new ListResponse<PropertyAllotApproveListModel>
                        {
                            Time = time,
                            Paging = new Paging
                            {
                                PageIndex = pageIndex,
                                PageSize = pageSize,
                                Total = allRecords.TotalCount,
                                FilterCount = string.IsNullOrEmpty(query) ? allRecords.TotalCount : allRecords.Count,
                            },
                            Data = allRecords.Select(pcr =>
                            {
                                var pcrl = pcr.ToListModel();
                                pcrl.Property_Id = pcr.Property.Id;

                                pcrl.ApproveType = approveType;
                                pcrl.CanApprove = PropertyCanApprove(pcr.State, pcr.SuggestGovernmentId);

                                pcrl.CanEditAndDelete = PropertyApproveCanEditDeleteAndSubmit(pcr.State, pcr.SuggestGovernmentId);

                                return pcrl;
                            })
                        };

                        //activity log
                        _accountUserActivityService.InsertActivity("GetAllAllotRecords", "获取相关资产划拨审批列表信息");

                        return Ok(response);
                        #endregion
                    }
                case "off":
                    {
                        #region 获取核销审批记录
                        var allRecords = _propertyOffService.GetAllOffRecords(targetGovIds, checkState, query, pageIndex,
                     pageSize, sortConditions);
                        var response = new ListResponse<PropertyOffApproveListModel>
                        {
                            Time = time,
                            Paging = new Paging
                            {
                                PageIndex = pageIndex,
                                PageSize = pageSize,
                                Total = allRecords.TotalCount,
                                FilterCount = string.IsNullOrEmpty(query) ? allRecords.TotalCount : allRecords.Count,
                            },
                            Data = allRecords.Select(pcr =>
                            {
                                var pcrl = pcr.ToListModel();
                                pcrl.Property_Id = pcr.Property.Id;

                                pcrl.ApproveType = approveType;
                                pcrl.CanApprove = PropertyCanApprove(pcr.State, pcr.SuggestGovernmentId);

                                pcrl.CanEditAndDelete = PropertyApproveCanEditDeleteAndSubmit(pcr.State, pcr.SuggestGovernmentId);

                                return pcrl;
                            })
                        };

                        //activity log
                        _accountUserActivityService.InsertActivity("GetAllOffRecords", "获取相关资产核销审批列表信息");

                        return Ok(response);
                        #endregion
                    }
                default:
                    return BadRequest("没有找到相应的处置类型");
            }
        }

        [HttpPost]
        [Route("Lend")]   //Url 的动词名称意义直观 修改则为UpdateLend，审批为ApproveLend
        public IHttpActionResult CreateLendRecord(PropertyLendModel propertyLendModel)
        {
            var currentUser = _workContext.CurrentAccountUser;
            var suggestGovernmentId = currentUser.Government.Id;
            if (propertyLendModel.Ids == "") return BadRequest("请选择需要处置的资产");
            var lendIds = propertyLendModel.Ids.Split(';');
            foreach (var id in lendIds) {
                if (id != "") {
                    var property = _propertyService.GetPropertyById(Convert.ToInt32(id));
                    if (property == null) continue;  //防止错误的PropertyId传入
                    if (property.Locked || property.Deleted || !property.Published)
                        return BadRequest("无法对该资产进行操作或该资产已经不存在");

                    if (!PropertyBelongCurrentUser(property, true)) return BadRequest("没有操作权限");

                    PropertyLend propertyLendRecord = new PropertyLend();
                    propertyLendRecord.Name = propertyLendModel.Name;
                    propertyLendRecord.Title = property.Name;
                    propertyLendRecord.LendArea = propertyLendModel.LendArea;
                    propertyLendRecord.LendTime = Convert.ToDateTime(propertyLendModel.LendTime);
                    propertyLendRecord.BackTime = DateTime.MaxValue;// Convert.ToDateTime(propertyLendModel.BackTime);
                    propertyLendRecord.Property = property;
                    propertyLendRecord.State = propertyLendModel.Submit ? PropertyApproveState.DepartmentApprove : PropertyApproveState.Start;
                 
                    propertyLendRecord.ProcessDate = DateTime.Now;
                    propertyLendRecord.SuggestGovernmentId = suggestGovernmentId;
               
                    //如果当前用户是主管部门，则跳过主管部门审核环节
                    if (propertyLendModel.Submit && _workContext.CurrentAccountUser.IsParentGovernmentorAuditor())
                    {
                        propertyLendRecord.State = PropertyApproveState.AdminApprove;
                        propertyLendRecord.DSuggestion = "同意";
                        propertyLendRecord.DApproveDate = DateTime.Now;
                    }

                    _propertyLendService.InsertPropertyLend(propertyLendRecord);
                    //activity log
                    _accountUserActivityService.InsertActivity("AddNewpropertyLendRecord", "增加 名为 {0} 的资产出借申请", property.Name);

                    #region 附件处理

                    //图片更新
                    SavePropertyLendPictures(propertyLendRecord, propertyLendModel.LendPictures);

                    //文件更新
                    SavePropertyLendFiles(propertyLendRecord, propertyLendModel.LendFiles);

                    _propertyLendService.UpdatePropertyLend(propertyLendRecord);

                    #endregion

                    SwitchPropertyLockState(propertyLendModel.Submit, property);
                }             
            }

            return Ok();
        }

        [HttpPost]
        [Route("Rent")]
        public IHttpActionResult CreateRentRecord(PropertyRentModel propertyRentModel)
        {
            if (propertyRentModel.Ids == "") return BadRequest("请选择需要处置的资产");
            var RentIds = propertyRentModel.Ids.Split(';');
            var currentUser = _workContext.CurrentAccountUser;
            foreach (var id in RentIds)
            {
                if (id != "")
                {
                    var property = _propertyService.GetPropertyById(Convert.ToInt32(id));
                    if (property == null) continue;  //防止错误的PropertyId传入
                    if (property.Locked || property.Deleted || !property.Published)
                        return BadRequest("无法对该资产进行操作或该资产已经不存在");

                    if (!PropertyBelongCurrentUser(property, true)) return BadRequest("没有操作权限");

                    PropertyRent rent = new PropertyRent();
                    rent.Name = propertyRentModel.Name;
                    rent.Title = property.Name;
                    rent.RentArea = propertyRentModel.RentArea;
                    rent.RentMonth = propertyRentModel.RentMonth;
                    if (propertyRentModel.PriceString.EndsWith(";")) rent.PriceString = propertyRentModel.PriceString.TrimEnd(';');
                    rent.RentPrice = propertyRentModel.RentPrice;
                    rent.RentTime = Convert.ToDateTime(propertyRentModel.RentTime);
                    rent.BackTime = Convert.ToDateTime(propertyRentModel.BackTime);
                    rent.Property = property;
                    rent.State = propertyRentModel.Submit ? PropertyApproveState.DepartmentApprove : PropertyApproveState.Start;
                    rent.ProcessDate = DateTime.Now;
                    rent.SuggestGovernmentId = currentUser.Government.Id;

                    //如果当前用户是主管部门，则跳过主管部门审核环节
                    if (propertyRentModel.Submit && _workContext.CurrentAccountUser.IsParentGovernmentorAuditor())
                    {
                        rent.State = PropertyApproveState.AdminApprove;
                        rent.DSuggestion = "同意";
                        rent.DApproveDate = DateTime.Now;
                    }

                    _propertyRentService.InsertPropertyRent(rent);
                    _accountUserActivityService.InsertActivity("AddNewpropertyLendRecord", "增加 名为 {0} 的资产出借申请", property.Name);

                    #region 附件处理

                    //图片更新
                    SavePropertyRentPictures(rent, propertyRentModel.RentPictures);

                    //文件更新
                    SavePropertyRentFiles(rent, propertyRentModel.RentFiles);
                    _propertyRentService.UpdatePropertyRent(rent);
                    #endregion

                    SwitchPropertyLockState(true, property);

                }

            }

            return Ok();
        }

        [HttpPost]
        [Route("Allot")]
        public IHttpActionResult CreateAllotRecord(PropertyAllotModel propertyAllotModel)
        {
            if (propertyAllotModel.Ids == "") return BadRequest("请选择需要处置的资产");
            var AllotIds = propertyAllotModel.Ids.Split(';');
            var currentUser = _workContext.CurrentAccountUser;
            var prePropertyOwner = currentUser.Government.Name;
            foreach (var id in AllotIds)
            {
                if (id != "")
                {
                    var property = _propertyService.GetPropertyById(Convert.ToInt32(id));
                 
                    if (property == null) continue;  //防止错误的PropertyId传入
                    if (property.Locked || property.Deleted || !property.Published)
                        return BadRequest("无法对该资产进行操作或该资产已经不存在");

                    if (!PropertyBelongCurrentUser(property, true)) return BadRequest("没有操作权限");

                    var nowGovernmentOwner = _governmentService.GetGovernmentUnitByName(propertyAllotModel.NowPropertyOwner).Name;
                    if (nowGovernmentOwner == null) return BadRequest("目标产权单位无效");

                    PropertyAllot allot = new PropertyAllot();
                    allot.PrePropertyOwner = prePropertyOwner;
                    allot.NowPropertyOwner = propertyAllotModel.NowPropertyOwner;
                    allot.NowGovernmentId = _governmentService.GetGovernmentUnitByName(propertyAllotModel.NowPropertyOwner).Id;
                    allot.Title = property.Name;
                    allot.AllotTime =Convert.ToDateTime( propertyAllotModel.AllotTime);
                    allot.Property = property;
                    allot.State = propertyAllotModel.Submit ? PropertyApproveState.DepartmentApprove : PropertyApproveState.Start;
                    allot.ProcessDate = DateTime.Now;
                    allot.SuggestGovernmentId = currentUser.Government.Id;

                    //如果当前用户是主管部门，则跳过主管部门审核环节
                    if (propertyAllotModel.Submit && _workContext.CurrentAccountUser.IsParentGovernmentorAuditor())
                    {
                        allot.State = PropertyApproveState.AdminApprove;
                        allot.DSuggestion = "同意";
                        allot.DApproveDate = DateTime.Now;
                    }

                    _propertyAllotService.InsertPropertyAllot(allot);
                    _accountUserActivityService.InsertActivity("AddNewpropertyLendRecord", "增加 名为 {0} 的资产出借申请", property.Name);


                    SavePropertyAllotPictures(allot, propertyAllotModel.AllotPictures);
                    SavePropertyAllotFiles(allot, propertyAllotModel.AllotFiles);

                    _propertyAllotService.UpdatePropertyAllot(allot);

                    SwitchPropertyLockState(true, property);
                }
            }

            return Ok();
        }

        [HttpPost]
        [Route("Off")]
        public IHttpActionResult CreateOffRecord(PropertyOffModel propertyOffModel)
        {
            if (propertyOffModel.Ids == "") return BadRequest("请选择需要处置的资产");
            var OffIds = propertyOffModel.Ids.Split(';');
            var currentUser = _workContext.CurrentAccountUser;
            var sid = currentUser.Government.Id;
            foreach (var id in OffIds)
            {
                if (id != "")
                {
                    var property = _propertyService.GetPropertyById(Convert.ToInt32(id));

                    if (property == null) continue;  //防止错误的PropertyId传入
                    if (property.Locked || property.Deleted || !property.Published)
                        return BadRequest("无法对该资产进行操作或该资产已经不存在");

                    if (!PropertyBelongCurrentUser(property, true)) return BadRequest("没有操作权限");

                    PropertyOff off = new PropertyOff();
                    off.Reason = propertyOffModel.Reason;
                    off.OffTime = Convert.ToDateTime(propertyOffModel.OffTime);
                    off.Price = propertyOffModel.Price;
                    off.Title = property.Name;
                    off.Property = property;
                    
                    off.SuggestGovernmentId = sid;
                    off.State = propertyOffModel.Submit ? PropertyApproveState.DepartmentApprove : PropertyApproveState.Start;
                    off.ProcessDate = DateTime.Now;
                    switch (propertyOffModel.OffType) {
                        case "0":
                            off.OffType = OffType.Auction;
                            break;
                        case "1":
                            off.OffType = OffType.Remove;
                            break;
                        case "2":
                            off.OffType = OffType.Storeup;
                            break;
                    }



                    //如果当前用户是主管部门，则跳过主管部门审核环节
                    if (propertyOffModel.Submit && _workContext.CurrentAccountUser.IsParentGovernmentorAuditor())
                    {
                        off.State = PropertyApproveState.AdminApprove;
                        off.DSuggestion = "同意";
                        off.DApproveDate = DateTime.Now;
                    }

                    _propertyOffService.InsertPropertyOff(off);
                    _accountUserActivityService.InsertActivity("AddNewpropertyLendRecord", "增加 名为 {0} 的资产出借申请", property.Name);

                    #region 附件处理

                    //图片更新
                    SavePropertyOffPictures(off, propertyOffModel.OffPictures);

                    //文件更新
                    SavePropertyOffFiles(off, propertyOffModel.OffFiles);

                    _propertyOffService.UpdatePropertyOff(off);
                    #endregion

                    SwitchPropertyLockState(true, property);
                }
            }

            return Ok();
        }

        [HttpPut]
        [Route("UpdateLend/{id}")]   
        public IHttpActionResult UpdateLendRecord(int id,PropertyLendModel propertyLendModel)
        {
            var currentUser = _workContext.CurrentAccountUser;
            var lend = _propertyLendService.GetPropertyLendById(id);
            
            if (!PropertyApproveCanEditDeleteAndSubmit(lend.State, lend.SuggestGovernmentId)) return BadRequest("该项目已无法编辑");

            lend = propertyLendModel.ToEntity(lend);

            #region 附件处理

            //图片更新
            SavePropertyLendPictures(lend, propertyLendModel.LendPictures);

            //文件更新
            SavePropertyLendFiles(lend, propertyLendModel.LendFiles);

            #endregion


            if (propertyLendModel.Submit)
            {
                lend.State = PropertyApproveState.DepartmentApprove;

                //如果当前用户是主管部门，则跳过主管部门审核环节
                if (currentUser.IsParentGovernmentorAuditor())
                {
                    lend.State = PropertyApproveState.AdminApprove;
                    lend.DSuggestion = "同意";
                    lend.DApproveDate = DateTime.Now;
                }
            }

                _propertyLendService.UpdatePropertyLend(lend);

            SwitchPropertyLockState(true , lend.Property);  //锁定资产

            return Ok();
        }

        [HttpPut]
        [Route("UpdateRent/{id}")]
        public IHttpActionResult UpdateRentRecord(int id,PropertyRentModel propertyRentModel)
        {

            var currentUser = _workContext.CurrentAccountUser;
            var rent = _propertyRentService.GetPropertyRentById(id);
            if (!PropertyApproveCanEditDeleteAndSubmit(rent.State, rent.SuggestGovernmentId)) return BadRequest("该项目已无法编辑");

              rent = propertyRentModel.ToEntity(rent);
         

            #region 附件处理

            //图片更新
            SavePropertyRentPictures(rent, propertyRentModel.RentPictures);

            //文件更新
            SavePropertyRentFiles(rent, propertyRentModel.RentFiles);

            #endregion

            if (propertyRentModel.Submit)
            {
                rent.State = PropertyApproveState.DepartmentApprove;

                //如果当前用户是主管部门，则跳过主管部门审核环节
                if (currentUser.IsParentGovernmentorAuditor())
                {
                    rent.State = PropertyApproveState.AdminApprove;
                    rent.DSuggestion = "同意";
                    rent.DApproveDate = DateTime.Now;
                }
            }
            else {
                rent.State = PropertyApproveState.Start;
            }

        _propertyRentService.UpdatePropertyRent(rent);

            SwitchPropertyLockState(true, rent.Property);

            return Ok();
        }

        [HttpPut]
        [Route("UpdateAllot/{id}")]
        public IHttpActionResult UpdateAllotRecord(int id,PropertyAllotModel propertyAllotModel)
        {
            var currentUser = _workContext.CurrentAccountUser;
            var allot = _propertyAllotService.GetPropertyAllotById(id);
            if (!PropertyApproveCanEditDeleteAndSubmit(allot.State, allot.SuggestGovernmentId)) return BadRequest("该项目已无法编辑");
            allot = propertyAllotModel.ToEntity(allot);
            allot.NowGovernmentId = _governmentService.GetGovernmentUnitByName(propertyAllotModel.NowPropertyOwner).Id;
            SavePropertyAllotPictures(allot, propertyAllotModel.AllotPictures);
            SavePropertyAllotFiles(allot, propertyAllotModel.AllotFiles);

            if (propertyAllotModel.Submit)
            {
                allot.State = PropertyApproveState.DepartmentApprove;

                //如果当前用户是主管部门，则跳过主管部门审核环节
                if (currentUser.IsParentGovernmentorAuditor())
                {
                    allot.State = PropertyApproveState.AdminApprove;
                    allot.DSuggestion = "同意";
                    allot.DApproveDate = DateTime.Now;
                }
            }

            else {
                allot.State = PropertyApproveState.Start;
            }

            _propertyAllotService.UpdatePropertyAllot(allot);

            SwitchPropertyLockState(true, allot.Property);

            return Ok();
        }

        [HttpPut]
        [Route("UpdateOff/{id}")]
        public IHttpActionResult UpdateOffRecord(int id,PropertyOffModel propertyOffModel)
        {
            var currentUser = _workContext.CurrentAccountUser;
            var off = _propertyOffService.GetPropertyOffById(id);

            if (!PropertyApproveCanEditDeleteAndSubmit(off.State, off.SuggestGovernmentId)) return BadRequest("该项目已无法编辑");
            off = propertyOffModel.ToEntity(off);
            switch (propertyOffModel.OffType)
            {
                case "0":
                    off.OffType = OffType.Auction;
                    break;
                case "1":
                    off.OffType = OffType.Remove;
                    break;
                case "2":
                    off.OffType = OffType.Storeup;
                    break;
            }

            #region 附件处理

            //图片更新
            SavePropertyOffPictures(off, propertyOffModel.OffPictures);

            //文件更新
            SavePropertyOffFiles(off, propertyOffModel.OffFiles);

            #endregion

            if (propertyOffModel.Submit)
            {
                off.State = PropertyApproveState.DepartmentApprove;

                //如果当前用户是主管部门，则跳过主管部门审核环节
                if (currentUser.IsParentGovernmentorAuditor())
                {
                    off.State = PropertyApproveState.AdminApprove;
                    off.DSuggestion = "同意";
                    off.DApproveDate = DateTime.Now;
                }
            }

            _propertyOffService.UpdatePropertyOff(off);

            SwitchPropertyLockState(true, off.Property);
            return Ok();
        }

        [HttpGet]
        [Route("NewCreate/{id}")]
        public IHttpActionResult GetNewCreate(int id)
        {
            var currentUser = _workContext.CurrentAccountUser;
            var government = currentUser.Government;

            var newCreate = _propertyNewCreateService.GetPropertyNewCreateById(id);
            if (newCreate == null || newCreate.Deleted) return BadRequest("无法找到资源");

            var property = _propertyService.GetPropertyById(newCreate.Property_Id);

            //if (!PropertyBelongCurrentUser(property, false)) return BadRequest("没有操作权限");

            var response = new PropertyNewCreateApproveModel
            {
                Property = newCreate.Property.ToModel(),
                PropertyNewCreate = newCreate.ToModel(),
                CanApprove = PropertyCanApprove(newCreate.State,newCreate.SuggestGovernmentId),
                CanEditAndDelete = PropertyApproveCanEditDeleteAndSubmit(newCreate.State, newCreate.SuggestGovernmentId),
                LinkMan = newCreate.Property.Government.Person,
                LinkTel = newCreate.Property.Government.Tel
            };

            #region 原数据库对象
            response.Property.LogoUrl = GetLogoUrl(newCreate.Property);
            //获取图片
            PreparePropertyPictures(response.Property);
            //获取文件
            PreparePropertyFiles(response.Property);
            #endregion            
 
            return Ok(response);
        }

        [HttpGet]
        [Route("Edit/{id}")]
        public IHttpActionResult GetEdit(int id)
        {
            var currentUser = _workContext.CurrentAccountUser;
            var government = currentUser.Government;

            var edit = _propertyEditService.GetPropertyEditById(id);
            if (edit == null || edit.Deleted) return BadRequest("无法找到资源");

            var property = _propertyService.GetPropertyById(edit.Property.Id);
            //if (!PropertyBelongCurrentUser(property, false)) return BadRequest("没有操作权限");

            var copyProperty = _copyPropertyService.GetCopyPropertyById(edit.CopyProperty_Id);
            var govermentName = _governmentService.GetGovernmentUnitById(copyProperty.Government_Id).Name;

            var response = new PropertyEditApproveModel
            {
                CopyProperty = copyProperty.ToModel(),               
                PropertyEdit = edit.ToModel(),
                CanApprove = PropertyCanApprove(edit.State, edit.SuggestGovernmentId),
                CanEditAndDelete = PropertyApproveCanEditDeleteAndSubmit(edit.State, edit.SuggestGovernmentId),
                LinkMan = edit.Property.Government.Person,
                LinkTel = edit.Property.Government.Tel
            };
            response.CopyProperty.GovernmentName = govermentName;            

            #region 新数据库对象
            #region 获取图片
            response.CopyProperty.Pictures = new List<PropertyPictureModel>();
            foreach (var pid in copyProperty.PrictureIds.Split('_'))
            {
                if (string.IsNullOrWhiteSpace(pid)) continue;
                var picture = _pictureService.GetPictureById(Convert.ToInt32(pid));
                if (picture == null) continue;

                var propertyPictureModel = new PropertyPictureModel
                {
                    PictureId = picture.Id,
                    PropertyId = copyProperty.Id,
                    Href = _pictureService.GetPictureUrl(picture.Id),
                    Title = picture.TitleAttribute
                };

                response.CopyProperty.Pictures.Add(propertyPictureModel);
            }
            #endregion

            #region 文件更新
            response.CopyProperty.Files = new List<PropertyFileModel>();
            foreach (var fid in copyProperty.FileIds.Split('_'))
            {
                if (string.IsNullOrWhiteSpace(fid)) continue;
                var file = _fileService.GetFileById(Convert.ToInt32(fid));
                if (file == null) continue;

                var propertyFileModel = new PropertyFileModel
                {
                    FileId = file.Id,
                    PropertyId = copyProperty.Id,
                    Src = _fileService.GetFileUrl(file),
                    Title = file.Name
                };

                response.CopyProperty.Files.Add(propertyFileModel);
            }

            #endregion
            var logoUrl = _pictureService.GetPictureUrl(copyProperty.LogoPicture_Id);
            response.CopyProperty.LogoUrl = string.IsNullOrEmpty(logoUrl) ? null : logoUrl;
            #endregion

            if(edit.State== PropertyApproveState.Finish && edit.OriginCopyProperty_Id!=0)
            {
                var originCopyProperty = _copyPropertyService.GetCopyPropertyById(edit.OriginCopyProperty_Id);
                var originGovermentName = _governmentService.GetGovernmentUnitById(originCopyProperty.Government_Id).Name;

                response.Property = originCopyProperty.ToModel();
                response.Property.GovernmentName = originGovermentName;

                #region 备份的原数据库对象
                #region 获取图片
                response.Property.Pictures = new List<PropertyPictureModel>();
                foreach (var pid in originCopyProperty.PrictureIds.Split('_'))
                {
                    if (string.IsNullOrWhiteSpace(pid)) continue;
                    var picture = _pictureService.GetPictureById(Convert.ToInt32(pid));
                    if (picture == null) continue;

                    var propertyPictureModel = new PropertyPictureModel
                    {
                        PictureId = picture.Id,
                        PropertyId = originCopyProperty.Id,
                        Href = _pictureService.GetPictureUrl(picture.Id),
                        Title = picture.TitleAttribute
                    };

                    response.Property.Pictures.Add(propertyPictureModel);
                }
                #endregion

                #region 文件更新
                response.Property.Files = new List<PropertyFileModel>();
                foreach (var fid in originCopyProperty.FileIds.Split('_'))
                {
                    if (string.IsNullOrWhiteSpace(fid)) continue;
                    var file = _fileService.GetFileById(Convert.ToInt32(fid));
                    if (file == null) continue;

                    var propertyFileModel = new PropertyFileModel
                    {
                        FileId = file.Id,
                        PropertyId = originCopyProperty.Id,
                        Src = _fileService.GetFileUrl(file),
                        Title = file.Name
                    };

                    response.Property.Files.Add(propertyFileModel);
                }

                #endregion
                var originLogoUrl = _pictureService.GetPictureUrl(originCopyProperty.LogoPicture_Id);
                response.Property.LogoUrl = string.IsNullOrEmpty(originLogoUrl) ? null : originLogoUrl;
                #endregion
            }
            else
            {
                response.Property = edit.Property.ToModel();

                #region 原数据库对象
                response.Property.LogoUrl = GetLogoUrl(edit.Property);
                //获取图片
                PreparePropertyPictures(response.Property);
                //获取文件
                PreparePropertyFiles(response.Property);
                #endregion
            }

            return Ok(response);
        }

        [HttpGet]
        [Route("Lend/{id}")]
        public IHttpActionResult GetLendDetail(int id) {

            var currentUser = _workContext.CurrentAccountUser;
            var government = currentUser.Government;

            var lend = _propertyLendService.GetPropertyLendById(id);
            if (lend == null || lend.Deleted) return BadRequest("无法找到资源");

            //if (!PropertyBelongCurrentUser(lend.Property, false)) return BadRequest("没有操作权限");

            var response = new PropertyLendApproveModel
            {
                Property = lend.Property.ToBasicModel(),
                PropertyLend = lend.ToModel(),
                CanApprove = PropertyCanApprove(lend.State,lend.SuggestGovernmentId),
                CanEditAndDelete = PropertyApproveCanEditDeleteAndSubmit(lend.State, lend.SuggestGovernmentId),
                LinkMan = lend.Property.Government.Person,
                LinkTel = lend.Property.Government.Tel
            };

            PreparePropertyLendPicturesAndFiles(response.PropertyLend);

            return Ok(response);
        }

        [HttpGet]
        [Route("Rent/{id}")]
        public IHttpActionResult GetRentDetail(int id)
        {
            var currentUser = _workContext.CurrentAccountUser;
            var government = currentUser.Government;

            var rent = _propertyRentService.GetPropertyRentById(id);
            if (rent == null || rent.Deleted) return BadRequest("无法找到资源");

            //if (!PropertyBelongCurrentUser(rent.Property, false)) return BadRequest("没有操作权限");

            var response = new PropertyRentApproveModel
            {
                Property = rent.Property.ToBasicModel(),
                PropertyRent = rent.ToModel(),
                CanApprove = PropertyCanApprove(rent.State,rent.SuggestGovernmentId),
                CanEditAndDelete = PropertyApproveCanEditDeleteAndSubmit(rent.State, rent.SuggestGovernmentId),
                LinkMan = rent.Property.Government.Person,
                LinkTel = rent.Property.Government.Tel
            };
            if (response.PropertyRent.PriceString.EndsWith(";")) response.PropertyRent.PriceString = response.PropertyRent.PriceString.TrimEnd(';');            

            PreparePropertyRentPicturesAndFiles(response.PropertyRent);

            return Ok(response);
        }

        [HttpGet]
        [Route("Allot/{id}")]
        public IHttpActionResult GetAllotDetail(int id)
        {
            var currentUser = _workContext.CurrentAccountUser;
            var government = currentUser.Government;

            var allot = _propertyAllotService.GetPropertyAllotById(id);
            if (allot == null || allot.Deleted) return BadRequest("无法找到资源");

            //if (!PropertyBelongCurrentUser(allot.Property, false)) return BadRequest("没有操作权限");

            var response = new PropertyAllotApproveModel
            {
                Property = allot.Property.ToBasicModel(),
                PropertyAllot = allot.ToModel(),
                CanApprove = PropertyCanApprove(allot.State,allot.SuggestGovernmentId),
                CanEditAndDelete = PropertyApproveCanEditDeleteAndSubmit(allot.State, allot.SuggestGovernmentId),
                LinkMan = allot.Property.Government.Person,
                LinkTel = allot.Property.Government.Tel
            };
            PreparePropertyAllotPicturesAndFiles(response.PropertyAllot);
            return Ok(response);
        }

        [HttpGet]
        [Route("Off/{id}")]
        public IHttpActionResult GetOffDetail(int id)
        {
            var currentUser = _workContext.CurrentAccountUser;
            var government = currentUser.Government;

            var off = _propertyOffService.GetPropertyOffById(id);
            if (off == null || off.Deleted) return BadRequest("无法找到资源");
            //if (!PropertyBelongCurrentUser(off.Property, false)) return BadRequest("没有操作权限");

            var response = new PropertyOffApproveModel
            {
                Property = off.Property.ToBasicModel(),
                PropertyOff = off.ToModel(),
                CanApprove = PropertyCanApprove(off.State,off.SuggestGovernmentId),
                CanEditAndDelete = PropertyApproveCanEditDeleteAndSubmit(off.State, off.SuggestGovernmentId),
                LinkMan = off.Property.Government.Person,
                LinkTel = off.Property.Government.Tel
            };
            PreparePropertyOffPicturesAndFiles(response.PropertyOff);
            return Ok(response);
        }

        /// <summary>
        /// 删除资产处置申请，除
        /// </summary>
        /// <param name="id"></param>
        /// <param name="approveType"></param>
        /// <returns></returns>
        [HttpDelete]
        [Route("Approve/{id}")]
        public IHttpActionResult DeleteApprove(int id, string approveType)
        {
            if (string.IsNullOrEmpty(approveType)) return BadRequest("找不到要处理的类型");

            switch (approveType)
            {
                case "edit":
                    #region 变更审批
                    {
                        var edit = _propertyEditService.GetPropertyEditById(id);
                        if (edit == null) return NotFound();
                        
                        if (!PropertyApproveCanEditDeleteAndSubmit(edit.State, edit.SuggestGovernmentId)) return BadRequest("无法删除");

                        _propertyEditService.DeletePropertyEdit(edit);

                        var copyProperty = _copyPropertyService.GetCopyPropertyByPropertyId(edit.Property.Id);
                        if (copyProperty != null)
                        {
                            copyProperty.Published = true;
                            _copyPropertyService.UpdateCopyProperty(copyProperty);
                        }

                        //活动日志
                        _accountUserActivityService.InsertActivity("deleteEditApprove", string.Format("删除id为 {0} 的资产变更的处置", id));

                        //解除锁定
                        edit.Property.Locked = false;
                        _propertyService.UpdateProperty(edit.Property);

                        break;
                    }
                    #endregion
                case "lend":
                    #region 出借审批
                    {
                        var lend = _propertyLendService.GetPropertyLendById(id);
                        if (lend == null) return NotFound();
                        if (!PropertyApproveCanEditDeleteAndSubmit(lend.State, lend.SuggestGovernmentId)) return BadRequest("无法删除");
                        _propertyLendService.DeletePropertyLend(lend);

                        //活动日志
                        _accountUserActivityService.InsertActivity("deleteLendApprove", string.Format("删除id为 {0} 的资产出借的处置", id));

                        //解除锁定
                        lend.Property.Locked = false;
                        _propertyService.UpdateProperty(lend.Property);

                        break;
                    }
                #endregion
                case "rent":
                    #region 出租审批
                    {
                        var rent = _propertyRentService.GetPropertyRentById(id);
                        if (rent == null) return NotFound();
                        if (!PropertyApproveCanEditDeleteAndSubmit(rent.State, rent.SuggestGovernmentId)) return BadRequest("无法删除");
                        _propertyRentService.DeletePropertyRent(rent);

                        //活动日志
                        _accountUserActivityService.InsertActivity("deleteLendApprove", string.Format("删除id为 {0} 的资产出租的处置", id));
                        //解除锁定
                        rent.Property.Locked = false;
                        _propertyService.UpdateProperty(rent.Property);
                        break;
                    }
                #endregion
                case "allot":
                    #region 划拨审批
                    {
                        var allot = _propertyAllotService.GetPropertyAllotById(id);
                        if (allot == null) return NotFound();
                        if (!PropertyApproveCanEditDeleteAndSubmit(allot.State, allot.SuggestGovernmentId)) return BadRequest("无法删除");
                        _propertyAllotService.DeletePropertyAllot(allot);

                        //活动日志
                        _accountUserActivityService.InsertActivity("deleteLendApprove", string.Format("删除id为 {0} 的资产划拨的处置", id));
                        //解除锁定
                        allot.Property.Locked = false;
                        _propertyService.UpdateProperty(allot.Property);
                        break;
                    }
                #endregion
                case "off":
                    #region 核销审批
                    {
                        var off = _propertyOffService.GetPropertyOffById(id);
                        var property = off.Property;

                        if (off == null) return NotFound();
                        if (!PropertyApproveCanEditDeleteAndSubmit(off.State, off.SuggestGovernmentId)) return BadRequest("无法删除");
                        _propertyOffService.DeletePropertyOff(off);

                        //活动日志
                        _accountUserActivityService.InsertActivity("deleteLendApprove", string.Format("删除id为 {0} 的资产核销的处置", id));
                        //解除锁定
                        property.Locked = false;
                        _propertyService.UpdateProperty(property);
                        break;
                    }
                    #endregion
            }

            return Ok();
        }

        /// <summary>
        /// 提交审批申请
        /// </summary>
        /// <param name="id"></param>
        /// <param name="approveApplyModel"></param>
        /// <returns></returns>
        [HttpPost]
        [Route("SubmitApprove/{id}")]
        public IHttpActionResult SumbitApprove(int id,string approveType="")
        {
          
            var currentUser = _workContext.CurrentAccountUser;

            switch (approveType)
            {
                case "newCreate":
                    #region 新增审批
                    {
                        var newCreate = _propertyNewCreateService.GetPropertyNewCreateById(id);
                        if (newCreate == null || newCreate.Deleted) return BadRequest("找不到资源");

                        if (PropertyApproveCanEditDeleteAndSubmit(newCreate.State, newCreate.SuggestGovernmentId))
                        {
                            newCreate.State = PropertyApproveState.DepartmentApprove;

                            if (currentUser.IsParentGovernmentorAuditor())  //当前用户既是主管部门又是报送部门   // if (currentUser.Government.ParentGovernmentId == 0)
                            {
                                newCreate.State = PropertyApproveState.AdminApprove;
                                newCreate.DApproveDate = DateTime.Now;
                                newCreate.DSuggestion = "同意";
                            }

                            _propertyNewCreateService.UpdatePropertyNewCreate(newCreate);

                            //活动日志
                            _accountUserActivityService.InsertActivity("submitNewCreateApprove", string.Format("提交id为 {0} 的新增资产的处置申请", id));

                            SwitchPropertyLockState(true, newCreate.Property);
                        }

                        break;
                    }
                #endregion
                case "edit":
                    #region 编辑审批
                    {
                        var edit = _propertyEditService.GetPropertyEditById(id);
                        if (edit == null || edit.Deleted) return BadRequest("找不到资源");

                        if (PropertyApproveCanEditDeleteAndSubmit(edit.State, edit.SuggestGovernmentId))
                        {
                            edit.State = PropertyApproveState.DepartmentApprove;

                            if (currentUser.IsParentGovernmentorAuditor())
                            {
                                edit.State = PropertyApproveState.AdminApprove;
                                edit.DApproveDate = DateTime.Now;
                                edit.DSuggestion = "同意";
                            }

                            _propertyEditService.UpdatePropertyEdit(edit);

                            //活动日志
                            _accountUserActivityService.InsertActivity("submitNewCreateApprove", string.Format("提交id为 {0} 的新增资产的处置申请", id));
                        }

                        break;
                    }
                #endregion
                case "lend":
                    #region 出借审批
                    {
                        var lend = _propertyLendService.GetPropertyLendById(id);
                        if (lend == null || lend.Deleted) return BadRequest("找不到资源");

                        if (PropertyApproveCanEditDeleteAndSubmit(lend.State, lend.SuggestGovernmentId))
                        {
                            lend.State = PropertyApproveState.DepartmentApprove;
                            if (currentUser.IsParentGovernmentorAuditor())
                            {
                                lend.State = PropertyApproveState.AdminApprove;
                                lend.DApproveDate = DateTime.Now;
                                lend.DSuggestion = "同意";
                            }

                            _propertyLendService.UpdatePropertyLend(lend);
                            //活动日志
                            _accountUserActivityService.InsertActivity("submitLendApprove", string.Format("提交id为 {0} 的资产出借的处置申请", id));
                        }

                        break;
                    }
                #endregion
                case "rent":
                    #region 出租审批
                    {
                        var rent = _propertyRentService.GetPropertyRentById(id);
                        if (rent == null || rent.Deleted) return BadRequest("找不到资源");

                        if (PropertyApproveCanEditDeleteAndSubmit(rent.State, rent.SuggestGovernmentId))
                        {
                            rent.State = PropertyApproveState.DepartmentApprove;
                            if (currentUser.IsParentGovernmentorAuditor())
                            {
                                rent.State = PropertyApproveState.AdminApprove;
                                rent.DApproveDate = DateTime.Now;
                                rent.DSuggestion = "同意";
                            }

                            _propertyRentService.UpdatePropertyRent(rent);

                            //活动日志
                            _accountUserActivityService.InsertActivity("submitRentApprove", string.Format("提交id为 {0} 的新增资产的处置申请", id));
                        }

                        break;
                    }
                #endregion
                case "allot":
                    #region 划拨审批
                    {
                        var allot = _propertyAllotService.GetPropertyAllotById(id);
                        if (allot == null || allot.Deleted) return BadRequest("找不到资源");

                        if (PropertyApproveCanEditDeleteAndSubmit(allot.State, allot.SuggestGovernmentId))
                        {
                            allot.State = PropertyApproveState.DepartmentApprove;
                            if (currentUser.IsParentGovernmentorAuditor())
                            {
                                allot.State = PropertyApproveState.AdminApprove;
                                allot.DApproveDate = DateTime.Now;
                                allot.DSuggestion = "同意";
                            }
                            _propertyAllotService.UpdatePropertyAllot(allot);

                            //活动日志
                            _accountUserActivityService.InsertActivity("submitAllotApprove", string.Format("提交id为 {0} 的资产划拨的处置申请", id));
                        }

                        break;
                    }
                #endregion
                case "off":
                    #region 核销审批
                    {
                        var off = _propertyOffService.GetPropertyOffById(id);
                        if (off == null || off.Deleted) return BadRequest("找不到资源");

                        if (PropertyApproveCanEditDeleteAndSubmit(off.State, off.SuggestGovernmentId))
                        {
                            off.State = PropertyApproveState.DepartmentApprove;
                            if (currentUser.IsParentGovernmentorAuditor())
                            {
                                off.State = PropertyApproveState.AdminApprove;
                                off.DApproveDate = DateTime.Now;
                                off.DSuggestion = "同意";
                            }
                            _propertyOffService.UpdatePropertyOff(off);

                            //活动日志
                            _accountUserActivityService.InsertActivity("submitOffApprove", string.Format("提交id为 {0} 的资产核销的处置申请", id));
                        }

                        break;
                    }
                    #endregion
            }
            return Ok();
        }

        /// <summary>
        /// 审批处置申请
        /// </summary>
        /// <param name="id"></param>
        /// <param name="approveApplyModel"></param>
        /// <returns></returns>
        [HttpPut]
        [Route("ApplyApprove/{id}")]
        public IHttpActionResult ApplyApprove(int id, ApproveApplyModel approveApplyModel)
        {
            bool agree = approveApplyModel.Agree;
            string suggestion = approveApplyModel.Suggestion;
            string approveType = approveApplyModel.ApproveType;

            if (agree && string.IsNullOrEmpty(suggestion))
                suggestion = "同意";

            switch (approveType)
            {
                case "newCreate":
                    #region 新增审批
                    {
                        var newCreate = _propertyNewCreateService.GetPropertyNewCreateById(id);
                        if (newCreate == null || newCreate.Deleted) return BadRequest("找不到资源");

                        if (newCreate.State == PropertyApproveState.DepartmentApprove)
                        {
                            newCreate.DApproveDate = DateTime.Now;
                            newCreate.DSuggestion = suggestion;
                        }
                        else if (newCreate.State == PropertyApproveState.AdminApprove)
                        {
                            newCreate.AApproveDate = DateTime.Now;
                            newCreate.ASuggestion = suggestion;
                        }

                        if (agree)
                        {

                            if (newCreate.State == PropertyApproveState.Start)
                            {
                                newCreate.State = PropertyApproveState.DepartmentApprove;
                            }
                            else if (newCreate.State == PropertyApproveState.DepartmentApprove) //主管部门审核阶段
                            {
                                newCreate.State = PropertyApproveState.AdminApprove;
                            }
                            else if (newCreate.State == PropertyApproveState.AdminApprove)
                            {
                                newCreate.State = PropertyApproveState.Finish;
                                newCreate.Property.Published = true;
                                SwitchPropertyLockState(false, newCreate.Property);

                                //    SwitchPropertyLockState(false, newCreate.Property);
                            }
                        }
                        else
                        {
                            newCreate.State = PropertyApproveState.Start;  //直接退回到申请单位                                      
                        }

                        _propertyNewCreateService.UpdatePropertyNewCreate(newCreate);

                        //活动日志
                        _accountUserActivityService.InsertActivity("applyNewCreateApprove", string.Format("执行id为 {0} 的新增资产的处置", id));

                        break;
                    }
                #endregion
                case "edit":
                    #region 编辑审批
                    {
                        var edit = _propertyEditService.GetPropertyEditById(id);
                        if (edit == null || edit.Deleted) return BadRequest("找不到资源");

                        if (edit.State == PropertyApproveState.DepartmentApprove)
                        {
                            edit.DApproveDate = DateTime.Now;
                            edit.DSuggestion = suggestion;
                        }
                        else if (edit.State == PropertyApproveState.AdminApprove)
                        {
                            edit.AApproveDate = DateTime.Now;
                            edit.ASuggestion = suggestion;
                        }

                        if (agree)
                        {

                            if (edit.State == PropertyApproveState.Start)
                            {
                                edit.State = PropertyApproveState.DepartmentApprove;
                            }
                            else if (edit.State == PropertyApproveState.DepartmentApprove) //主管部门审核阶段
                            {
                                edit.State = PropertyApproveState.AdminApprove;
                            }
                            else if (edit.State == PropertyApproveState.AdminApprove)
                            {
                                var property = _propertyService.GetPropertyById(edit.Property.Id);
                                var copyproperty = _copyPropertyService.GetCopyPropertyById(edit.CopyProperty_Id);

                                #region 资产原值存储
                                var originCopyProperty = new CopyProperty();
                                originCopyProperty.Name = property.Name;
                                originCopyProperty.PropertyType = property.PropertyType;
                                originCopyProperty.Region = property.Region;
                                originCopyProperty.Address = property.Address;
                                originCopyProperty.ConstructArea = property.ConstructArea;
                                originCopyProperty.LandArea = property.LandArea;
                                originCopyProperty.PropertyID = property.PropertyID;
                                originCopyProperty.HasConstructID = property.HasConstructID;
                                originCopyProperty.HasLandID = property.HasLandID;
                                originCopyProperty.PropertyNature = property.PropertyNature;
                                originCopyProperty.LandNature = property.LandNature;
                                originCopyProperty.Price = property.Price;
                                originCopyProperty.GetedDate = property.GetedDate;
                                originCopyProperty.LifeTime = property.LifeTime;
                                originCopyProperty.UsedPeople = property.UsedPeople;
                                originCopyProperty.CurrentUse_Self = property.CurrentUse_Self;
                                originCopyProperty.CurrentUse_Rent = property.CurrentUse_Rent;
                                originCopyProperty.CurrentUse_Lend = property.CurrentUse_Lend;
                                originCopyProperty.CurrentUse_Idle = property.CurrentUse_Idle;
                                originCopyProperty.NextStepUsage = property.NextStepUsage;
                                originCopyProperty.Location = property.Location == null ? "" : property.Location.AsText();
                                originCopyProperty.Extent = property.Extent == null ? "" : property.Extent.AsText();
                                originCopyProperty.Description = property.Description;
                                originCopyProperty.EstateId = property.EstateId;
                                originCopyProperty.ConstructId = property.ConstructId;
                                originCopyProperty.LandId = property.LandId;
                                originCopyProperty.Government_Id = property.Government.Id;

                                originCopyProperty.PrictureIds = string.Join("_", property.Pictures.Select(p => p.PictureId).ToArray());
                                originCopyProperty.FileIds = string.Join("_", property.Files.Select(p => p.FileId).ToArray());
                                var originPropertyLogoPicture = property.Pictures.Where(pp => pp.IsLogo).FirstOrDefault();
                                if (originPropertyLogoPicture != null) originCopyProperty.LogoPicture_Id = originPropertyLogoPicture.PictureId;

                                _copyPropertyService.InsertCopyProperty(originCopyProperty);
                                #endregion

                                #region 资产赋新值                           
                                property.Name = copyproperty.Name;
                                property.PropertyType = copyproperty.PropertyType;
                                property.Region = copyproperty.Region;
                                property.Address = copyproperty.Address;
                                property.ConstructArea = copyproperty.ConstructArea;
                                property.LandArea = copyproperty.LandArea;
                                property.PropertyID = copyproperty.PropertyID;
                                property.HasConstructID = copyproperty.HasConstructID;
                                property.HasLandID = copyproperty.HasLandID;
                                property.PropertyNature = copyproperty.PropertyNature;
                                property.LandNature = copyproperty.LandNature;
                                property.Price = copyproperty.Price;
                                property.GetedDate = copyproperty.GetedDate;
                                property.LifeTime = copyproperty.LifeTime;
                                property.UsedPeople = copyproperty.UsedPeople;
                                property.CurrentUse_Self = copyproperty.CurrentUse_Self;
                                property.CurrentUse_Rent = copyproperty.CurrentUse_Rent;
                                property.CurrentUse_Lend = copyproperty.CurrentUse_Lend;
                                property.CurrentUse_Idle = copyproperty.CurrentUse_Idle;
                                property.NextStepUsage = copyproperty.NextStepUsage;
                                if (!string.IsNullOrEmpty(copyproperty.Location))
                                    property.Location = DbGeography.FromText(copyproperty.Location);
                                else return BadRequest("空间位置未赋值");
                                if (!string.IsNullOrEmpty(copyproperty.Extent))
                                    property.Extent = DbGeography.FromText(copyproperty.Extent);
                                property.Description = copyproperty.Description;
                                property.EstateId = copyproperty.EstateId;
                                property.ConstructId = copyproperty.ConstructId;
                                property.LandId = copyproperty.LandId;
                                if (property.Government.Id != copyproperty.Government_Id)
                                    property.Government = _governmentService.GetGovernmentUnitById(copyproperty.Government_Id);

                                #region 图片更新
                                var propertyPictureModels = new List<PropertyPictureModel>();

                                foreach (var pid in copyproperty.PrictureIds.Split('_'))
                                {
                                    if (string.IsNullOrWhiteSpace(pid)) continue;
                                    var picture = _pictureService.GetPictureById(Convert.ToInt32(pid));

                                    if (picture == null) continue;

                                    var propertyPictureModel = new PropertyPictureModel
                                    {
                                        PictureId = picture.Id,
                                        PropertyId = copyproperty.Id
                                    };

                                    propertyPictureModels.Add(propertyPictureModel);
                                }
                                //图片更新
                                SavePropertyPictures(property, propertyPictureModels);
                                #endregion

                                #region logo更新
                                var logoPicture = _pictureService.GetPictureById(copyproperty.LogoPicture_Id);
                                if (logoPicture != null)
                                {
                                    var propertyLogoPicture = property.Pictures.Where(p => p.IsLogo).SingleOrDefault();

                                    if (propertyLogoPicture != null)
                                    {
                                        if (propertyLogoPicture.PictureId != copyproperty.LogoPicture_Id)
                                        {
                                            propertyLogoPicture.Picture = logoPicture;
                                            _propertyService.UpdatePropertyPicture(propertyLogoPicture);
                                        }
                                    }
                                    else
                                    {
                                        propertyLogoPicture = new PropertyPicture
                                        {
                                            Property = property,
                                            IsLogo = true,
                                            Picture = logoPicture
                                        };

                                        property.Pictures.Add(propertyLogoPicture);
                                    }
                                }
                                #endregion

                                #region 文件更新
                                var propertyFileModels = new List<PropertyFileModel>();
                                foreach (var fid in copyproperty.FileIds.Split('_'))
                                {
                                    if (string.IsNullOrWhiteSpace(fid)) continue;
                                    var file = _pictureService.GetPictureById(Convert.ToInt32(fid));
                                    if (file == null) continue;

                                    var propertyFileModel = new PropertyFileModel
                                    {
                                        FileId = file.Id,
                                        PropertyId = copyproperty.Id
                                    };

                                    propertyFileModels.Add(propertyFileModel);
                                }

                                SavePropertyFiles(property, propertyFileModels);
                                #endregion

                                #endregion

                                edit.State = PropertyApproveState.Finish;
                                edit.OriginCopyProperty_Id = originCopyProperty.Id;  //历史Property记录
                                property.Published = true;
                                copyproperty.Published = true;

                                SwitchPropertyLockState(false, property);
                                _propertyService.UpdateProperty(property);
                                _copyPropertyService.UpdateCopyProperty(copyproperty);
                            }
                        }
                        else
                        {
                            edit.State = PropertyApproveState.Start;  //直接退回到申请单位                                      
                        }

                        _propertyEditService.UpdatePropertyEdit(edit);

                        //活动日志
                        _accountUserActivityService.InsertActivity("applyNewCreateApprove", string.Format("执行id为 {0} 的新增资产的处置", id));

                        break;
                    }
                #endregion
                case "lend":
                    #region 出借审批
                    {
                        var lend = _propertyLendService.GetPropertyLendById(id);
                        if (lend == null || lend.Deleted) return BadRequest("找不到资源");

                        if (lend.State == PropertyApproveState.DepartmentApprove)
                        {
                            lend.DApproveDate = DateTime.Now;
                            lend.DSuggestion = suggestion;
                        }
                        else if (lend.State == PropertyApproveState.AdminApprove)
                        {
                            lend.AApproveDate = DateTime.Now;
                            lend.ASuggestion = suggestion;
                        }

                        if (agree)
                        {
                            if (lend.State == PropertyApproveState.Start)
                            {
                                lend.State = PropertyApproveState.DepartmentApprove;
                            }
                            else if (lend.State == PropertyApproveState.DepartmentApprove)                             //主管部门审核阶段
                            {
                                lend.State = PropertyApproveState.AdminApprove;
                            }
                            else if (lend.State == PropertyApproveState.AdminApprove)
                            {
                                lend.State = PropertyApproveState.Finish;
                                SwitchPropertyLockState(false, lend.Property);
                            }
                        }
                        else
                        {
                            lend.State = PropertyApproveState.Start;  //直接退回到申请单位                                      
                        }

                        _propertyLendService.UpdatePropertyLend(lend);

                        //活动日志
                        _accountUserActivityService.InsertActivity("applyNewCreateApprove", string.Format("执行id为 {0} 的资产出借的处置", id));

                        break;
                    }
                #endregion
                case "rent":
                    #region 出租审批
                    {
                        var rent = _propertyRentService.GetPropertyRentById(id);
                        if (rent == null || rent.Deleted) return BadRequest("找不到资源");

                        if (rent.State == PropertyApproveState.DepartmentApprove)
                        {
                            rent.DApproveDate = DateTime.Now;
                            rent.DSuggestion = suggestion;
                        }
                        else if (rent.State == PropertyApproveState.AdminApprove)
                        {
                            rent.AApproveDate = DateTime.Now;
                            rent.ASuggestion = suggestion;
                        }

                        if (agree)
                        {
                            //主管部门审核阶段
                            if (rent.State == PropertyApproveState.Start)
                            {
                                rent.State = PropertyApproveState.DepartmentApprove;
                            }
                            else if (rent.State == PropertyApproveState.DepartmentApprove)
                            {
                                rent.State = PropertyApproveState.AdminApprove;
                            }
                            else if (rent.State == PropertyApproveState.AdminApprove)
                            {
                                rent.State = PropertyApproveState.Finish;
                                SwitchPropertyLockState(false, rent.Property);
                            }
                        }
                        else
                        {
                            rent.State = PropertyApproveState.Start;  //直接退回到申请单位                                      
                        }

                        _propertyRentService.UpdatePropertyRent(rent);

                        //活动日志
                        _accountUserActivityService.InsertActivity("applyNewCreateApprove", string.Format("执行id为 {0} 的资产出租的处置", id));

                        break;
                    }
                #endregion
                case "allot":
                    #region 划拨审批
                    {
                        var allot = _propertyAllotService.GetPropertyAllotById(id);
                        if (allot == null || allot.Deleted) return BadRequest("找不到资源");

                        if (allot.State == PropertyApproveState.DepartmentApprove)
                        {
                            allot.DApproveDate = DateTime.Now;
                            allot.DSuggestion = suggestion;
                        }
                        else if (allot.State == PropertyApproveState.AdminApprove)
                        {
                            allot.AApproveDate = DateTime.Now;
                            allot.ASuggestion = suggestion;
                        }

                        if (agree)
                        {
                            //主管部门审核阶段
                            if (allot.State == PropertyApproveState.Start)
                            {
                                allot.State = PropertyApproveState.DepartmentApprove;
                            }
                            else if (allot.State == PropertyApproveState.DepartmentApprove)
                            {
                                allot.State = PropertyApproveState.AdminApprove;
                            }
                            else if (allot.State == PropertyApproveState.AdminApprove)
                            {
                                allot.State = PropertyApproveState.Finish;
                                var newGovernment = _governmentService.GetGovernmentUnitById(allot.NowGovernmentId);
                                if (newGovernment == null) return BadRequest("找不到新的权属单位");
                                allot.Property.Government = newGovernment;

                                SwitchPropertyLockState(false, allot.Property);
                                
                            }
                        }
                        else
                        {
                            allot.State = PropertyApproveState.Start;  //直接退回到申请单位                                      
                        }

                        _propertyAllotService.UpdatePropertyAllot(allot);

                        //活动日志
                        _accountUserActivityService.InsertActivity("applyNewCreateApprove", string.Format("执行id为 {0} 的资产的划拨处置", id));

                        break;
                    }
                #endregion
                case "off":
                    #region 划拨审批
                    {
                        var off = _propertyOffService.GetPropertyOffById(id);
                        if (off == null || off.Deleted) return BadRequest("找不到资源");

                        if (off.State == PropertyApproveState.Start)
                        {
                            off.State = PropertyApproveState.DepartmentApprove;
                        }
                        else if (off.State == PropertyApproveState.DepartmentApprove)
                        {
                            off.DApproveDate = DateTime.Now;
                            off.DSuggestion = suggestion;
                        }
                        else if (off.State == PropertyApproveState.AdminApprove)
                        {
                            off.AApproveDate = DateTime.Now;
                            off.ASuggestion = suggestion;
                        }

                        if (agree)
                        {
                            //主管部门审核阶段
                            if (off.State == PropertyApproveState.DepartmentApprove)
                            {
                                off.State = PropertyApproveState.AdminApprove;
                            }
                            else if (off.State == PropertyApproveState.AdminApprove)
                            {
                                off.State = PropertyApproveState.Finish;
                                off.Property.Off = true;
                                off.Property.Published = false;
                                SwitchPropertyLockState(false, off.Property);
                            }
                        }
                        else
                        {
                            off.State = PropertyApproveState.Start;  //直接退回到申请单位                                      
                        }

                        _propertyOffService.UpdatePropertyOff(off);

                        //活动日志
                        _accountUserActivityService.InsertActivity("applyNewCreateApprove", string.Format("执行id为 {0} 的资产核销处置", id));

                        break;
                    }
                    #endregion
            }
            return Ok();
        }

        [HttpGet]
        [Route("Approve/Statistics")]
        public IHttpActionResult ApproveStatistics()
        {
            var currentUser = _workContext.CurrentAccountUser;
            var government = currentUser.Government;
            var targetGovIds = new List<int>();
            if (currentUser.IsGovAuditor())
            {
                targetGovIds = _governmentService.GetAllGovernmentUnitsByType(
                    new GovernmentType[2] { GovernmentType.Government, GovernmentType.Institution }).Select(g => g.Id).ToList();
            }
            else if (currentUser.IsStateOwnerAuditor())
            {
                targetGovIds = _governmentService.GetAllGovernmentUnitsByType(
                    new GovernmentType[1] { GovernmentType.Company }).Select(g => g.Id).ToList();
            }
            else
            {
                targetGovIds = _governmentService.GetChildrenGovernmentIds(government.Id);
            }
            string sort = "processDate,desc;";
            var condition = PropertySortCondition.Instance(sort);
            var response = new ApproveStatisticsModel();
            response.NewCreate = _propertyNewCreateService.GetAllNewCreateRecords(targetGovIds, "unchecked", "", 0, int.MaxValue, condition).Count;
            response.Edit = _propertyEditService.GetAllEditRecords(targetGovIds, "unchecked", "", 0, int.MaxValue, condition).Count;
            response.Lend = _propertyLendService.GetAllLendRecords(targetGovIds, "unchecked", "", 0, int.MaxValue, condition).Count;
            response.Rent = _propertyRentService.GetAllRentRecords(targetGovIds, "unchecked", "", 0, int.MaxValue, condition).Count;
            response.Allot = _propertyAllotService.GetAllAllotRecords(targetGovIds, "unchecked", "", 0, int.MaxValue, condition).Count;
            response.Off = _propertyOffService.GetAllOffRecords(targetGovIds, "unchecked", "", 0, int.MaxValue, condition).Count;

            return Ok(response);
        }

        [HttpGet]
        [Route("ProcessFilter")]
        public IHttpActionResult GetAllProcess(string query = "", string sort = "",bool showHidden = false, long time = 0,
          bool manage = false, bool isGovernment = false, bool isInstitution = false, bool isCompany = false, int selectedId = 0,
          bool construct = false, bool land = false, bool constructOnLand = false,//资产类型
          bool old = false, bool west = false, bool jjq = false, bool kc = false, bool qj = false, bool other = false, //区域
          bool certi_both = false, bool certi_land = false, bool certi_construct = false, bool certi_none = false, //证书情况
          bool current_self = false, bool current_rent = false, bool current_lend = false, bool currnet_idle = false, //使用现状
          bool auction = false, bool ct = false, bool jt = false, bool jk = false, bool self = false, bool storeUp = false, bool adjust = false, bool greenland = false, bool house = false//下步使用
       //   string constructAreaRange = "", string landAreaRange = "", string priceRange = "", string getDateRange=""  //范围参数
          )
        {
            var currentUser = _workContext.CurrentAccountUser;
            

            //初始化排序条件
            var sortConditions = PropertySortCondition.Instance(sort);

            //特殊字段排序调整
            if (sort.ToLower().StartsWith("governmentname")) sortConditions[0].PropertyName = "Government";

            //高级搜索参数设置
            PropertyAdvanceConditionModel advance = new PropertyAdvanceConditionModel
            {
                Government = new GovernmentFilterModel { Manage = manage, IsCompany = isCompany, IsGovernment = isGovernment, IsInstitution = isInstitution, SelectedId = selectedId },
                PropertyType = new PropertyTypeModel { Construct = construct, Land = land, ConstructOnLand = constructOnLand },
                Region = new RegionModel { West = west, Jjq = jjq, Kc = kc, Old = old, Other = other, Qj = qj },
                Certificate = new Certificate { Both = certi_both, Construct = certi_construct, Land = certi_land, None = certi_land },
                Current = new CurrentModel { Idle = currnet_idle, Lend = current_lend, Rent = current_rent, Self = current_self },
                NextStep = new NextStepModel { Adjust = adjust, Auction = auction, Ct = ct, Jt = jt, Jk = jk, Greenland = greenland, House = house, Self = self, StoreUp = storeUp },
                Time = time
            };
  
            //高级搜索参数设置
            PropertyAdvanceConditionRequest request = PrepareAdvanceCondition(advance);

            var governmentIds = _governmentService.GetGovernmentIdsByCurrentUser(true);  //不包含已有账号的下级单位
            var properties = _propertyService.GetAllProcessProperties(governmentIds, query, 
                request, sortConditions).Select(sp=>
                {
                    
                    return new
                    {
                        Id = sp.Id,
                        Name = sp.Name,
                        Region = sp.Region.ToDescription(),
                        Address = sp.Address,
                        G = sp.Government.Name,
                        ConstructArea = sp.ConstructArea,
                        LandArea = sp.LandArea,
                        PropertyType = sp.PropertyType,
                        Price =sp.Price

                    };
                });

            //activity log
            _accountUserActivityService.InsertActivity("GetpropertyList", "获取资产列表信息");

            return Ok(properties);
        }

        #endregion

    }
}
